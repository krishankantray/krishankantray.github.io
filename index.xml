<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Krishankant</title><link>/</link><description>Recent content on Krishankant</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Sep 2021 09:46:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>System Design Fundamentals</title><link>/posts/system-design-template/</link><pubDate>Mon, 13 Sep 2021 09:46:00 +0000</pubDate><guid>/posts/system-design-template/</guid><description>&amp;hellip;in progress</description><content>&lt;p>&amp;hellip;in progress&lt;/p></content></item><item><title>CSV to SQL import using Node, Express and React</title><link>/posts/csv-to-sql-import/</link><pubDate>Sun, 19 Apr 2020 21:26:17 +0530</pubDate><guid>/posts/csv-to-sql-import/</guid><description>CSV to SQL import
Github : Front-End Part Back-End Part
What is this app all about ? This app allows users to import a .csv file and save it in MySQL. The .csv file needs to be in a specified format, something like this . Once the data is saved we can see and delete the table data on the front-end.
Whats there on back-end and front-end ? Back-End : NodeJS ExpressJS MySQL Front-End : ReactJS Here is the SQL table structure :</description><content>&lt;h1 id="csv-to-sql-import">CSV to SQL import&lt;/h1>
&lt;p>&lt;a href="https://suspicious-carson-2627ba.netlify.app/">&lt;img src="https://raw.githubusercontent.com/krishankantray/temp/master/visit_button.JPG" alt="N|Solid">&lt;/a>&lt;/p>
&lt;p>Github : &lt;a href="https://github.com/krishankantray/csv-to-sql-import-client">Front-End Part&lt;/a>
              &lt;a href="https://github.com/krishankantray/csv-to-sql-import-server">Back-End Part&lt;/a>&lt;/p>
&lt;h4 id="what-is-this-app-all-about-">&lt;strong>What is this app all about ?&lt;/strong>&lt;/h4>
&lt;p>This app allows users to import a .csv file and save it in MySQL. The .csv file needs to be in a specified format, something like this .
Once the data is saved we can see and delete the table data on the front-end.&lt;/p>
&lt;h4 id="whats-there-on-back-end-and-front-end-">&lt;strong>Whats there on back-end and front-end ?&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Back-End :&lt;/strong>
&lt;ul>
&lt;li>NodeJS&lt;/li>
&lt;li>ExpressJS&lt;/li>
&lt;li>MySQL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Front-End :&lt;/strong>
&lt;ul>
&lt;li>ReactJS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Here is the SQL table structure :&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>int(11)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>level_col&lt;/td>
&lt;td>varchar(255)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cvss&lt;/td>
&lt;td>varchar(255)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>title&lt;/td>
&lt;td>varchar(255)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vulnerability&lt;/td>
&lt;td>varchar(255)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>solution&lt;/td>
&lt;td>varchar(255)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>reference_col&lt;/td>
&lt;td>varchar(255)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="where-is-it-deployed-">&lt;strong>Where is it deployed ?&lt;/strong>&lt;/h4>
&lt;p>Client side app ( React app ) is deployed on &lt;a href="https://www.netlify.com/">Netlify&lt;/a>
Server side app ( Node app ) is deployed on &lt;a href="https://www.heroku.com/">Heroku&lt;/a>
MySQL database is deployed on Remote &lt;a href="https://remotemysql.com/">Mysql&lt;/a>&lt;/p>
&lt;h4 id="how-to-run-it-locally-">How to run it locally ?&lt;/h4>
&lt;p>To run it locally we need to clone two git repositories, one for the server and other for the client ( front-end).&lt;/p>
&lt;h5 id="to-clone-the-client-repo-">To clone the client repo :&lt;/h5>
&lt;p>&lt;code>git clone https://github.com/krishankantray/csv-to-sql-import-client.git &lt;/code>&lt;/p>
&lt;h5 id="to-clone-the-server-repo-">To clone the server repo :&lt;/h5>
&lt;p>&lt;code>git clone https://github.com/krishankantray/csv-to-sql-import-server.git&lt;/code>&lt;/p>
&lt;p>The above git setup is for online server auto deployment on &lt;strong>Heroku&lt;/strong> and &lt;strong>Netlify&lt;/strong> .
We need to make some changes in it to run it locally.&lt;/p>
&lt;h5 id="first-we-setup-the-server-locally--">First we setup the server locally :&lt;/h5>
&lt;ul>
&lt;li>Open the directory : &lt;code>csv-to-sql-import-server&lt;/code> , in any vscode or any other editor.&lt;/li>
&lt;li>If you have a local MySql db then do replace the details in the &lt;code>app&amp;gt;&amp;gt;config&amp;gt;&amp;gt;db.config.js&lt;/code>
If you don&amp;rsquo;t have a local MySql db then leave it as it is.&lt;/li>
&lt;/ul>
&lt;p>Now, open terminal ( &lt;em>in the directory&lt;/em> : csv-to-sql-import-server ):&lt;/p>
&lt;p>&lt;code>npm install&lt;/code>
&lt;code>npm start&lt;/code>
It should print in terminal : &lt;code>Server is running on port 9000.&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>( Make sure there is nothing previously running on port 9000, if there is then change the &amp;gt;port from line 25 of server.js )&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>To test if all APIs are working, open postman and use following APIs&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>GET call for obtaining all the records, url should be :&lt;code>http://localhost:9000/customers/&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GET call for single records by id, for eg : &lt;code>http://localhost:9000/customers/963&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST call for bulk create records : &lt;code>http://localhost:9000/bulkcreate&lt;/code> This call needs a body to be passed&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST call for single create records &lt;code>http://localhost:9000/customers&lt;/code> This call needs a body to be passed&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DELETE call for all records deletion &lt;code>http://localhost:9000/customers &lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DELETE call for records deletion &lt;code>http://localhost:9000/customers/963 &lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PUT call to update a single record &lt;code>http://localhost:9000/customers/963 &lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="now-we-will-configure-the-local-front-end--react-app--">Now, we will configure the local front-end ( React app ) :&lt;/h5>
&lt;p>We only need to make some changes in App.js within src directory.
Just change the line 35 , 69 and 97, i.e we need to change the URL of all the fetch calls from Apps.js.&lt;/p>
&lt;p>&lt;em>For Example :&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>35 : Before &lt;a href="https://csv-to-sql-import.herokuapp.com/bulkcreate">https://csv-to-sql-import.herokuapp.com/bulkcreate&lt;/a>
35 : After http:localhost:9000/bulkcreate&lt;/p>
&lt;/blockquote>
&lt;p>Similarly for line 69 and 97 , just replace this part of URL -
&lt;a href="https://csv-to-sql-import.herokuapp.com">https://csv-to-sql-import.herokuapp.com&lt;/a>
with
http:localhost:9000&lt;/p>
&lt;p>and rest of the part of url remains same.&lt;/p></content></item><item><title>Kadane's Algorithm</title><link>/posts/2020-04-03-kadanes-algorithm/</link><pubDate>Fri, 03 Apr 2020 06:16:00 +0530</pubDate><guid>/posts/2020-04-03-kadanes-algorithm/</guid><description>Kadane&amp;rsquo;s Algorithm TL;DR
This algorithm is used to find maximum sum sub-array from a given array.  Its has O(n) time complexity and O(1) space complexity.  It works irrespective of whether the elements are positive or negative, whether sorted or unsorted.  Its DP approach Its brute force approach takes O(n^2) as it calculates all possible sub-array and then return maximum out of them.  Since brute force approach is very obvious and easy to implement, so, I am not discussing it here.</description><content>&lt;h2 id="span-stylecolor-redspan-stylefont-size-x-largespan-stylefont-family-verdana-sans-serifkadanes-algorithmspanspanspan">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Kadane&amp;rsquo;s Algorithm&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>TL;DR&lt;/p>
&lt;ul>
&lt;li>This algorithm is used to find maximum sum sub-array from a given
array. &lt;/li>
&lt;li>Its has O(n) time complexity and O(1) space complexity.  &lt;/li>
&lt;li>It works irrespective of whether the elements are positive or
negative, whether sorted or unsorted. &lt;/li>
&lt;li>Its DP approach&lt;/li>
&lt;li>Its brute force approach takes O(n^2) as it calculates all possible
sub-array and then return maximum out of them. &lt;/li>
&lt;/ul>
&lt;p>Since brute force approach is very obvious and easy to implement, so, I
am not discussing it here.&lt;/p>
&lt;h4 id="lets-directly-jump-to-kadanes-algorithm-">Lets directly jump to Kadane&amp;rsquo;s Algorithm : &lt;/h4>
&lt;p>Its uses two variables one stores local maximum ( &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->) and other stores global maximum ( &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->global_maximum&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->) .&lt;br>
Initialise , &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum
= 0 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->and &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->global_maximum&lt;!-- raw HTML omitted -->
= -Infinity &lt;!-- raw HTML omitted -->&lt;/p>
&lt;dl>
&lt;dt>We start iteration from the first element, and for each element we check&lt;/dt>
&lt;dt>following condition before updating the &amp;lt;span&lt;/dt>
&lt;dt>style=&amp;ldquo;color: #e69138;&amp;quot;&amp;gt;&amp;lt;span&lt;/dt>
&lt;dt>style=&amp;ldquo;font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;&amp;quot;&amp;gt;local_maximum&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/dt>
&lt;dd>&lt;/dd>
&lt;/dl>
&lt;ul>
&lt;li>if  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum
&amp;lt; 0&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->,  then &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum
= arr[i]&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> ,  this is because if &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->is negative value then adding it with current value
will result into lower value.&lt;br>
Otherwise, if&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->
local_maximum &amp;gt;=0 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->then &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum=
local_maximum + arr[i]&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> .&lt;/li>
&lt;/ul>
&lt;p>Now, we got &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->local_maximum
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->till current element, its time to compare it with &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->global_maximum&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->. &lt;/p>
&lt;p> &lt;/p>
&lt;ul>
&lt;li>If &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->global_maximum
&amp;lt; local_maximum&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> then  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->global
maximum = local_maximum&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->              &lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;p> Thats it, now after whole iteration is finished the our answer is the
value of &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->global_maximum&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->. &lt;/p>
&lt;p> &lt;/p>
&lt;h4 id="now-its-time-to-code-it-out-">Now, its time to code it out : &lt;/h4>
&lt;p>Language used : &lt;code>JavaScript&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">maxSubArray&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">local_maximum&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span>
.&lt;span style="color:#a6e22e">reduce&lt;/span>( (&lt;span style="color:#a6e22e">global_maximum&lt;/span>,&lt;span style="color:#a6e22e">current_element&lt;/span>)=&amp;gt;{
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">local_maximum&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> ) {
&lt;span style="color:#a6e22e">local_maximum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">current_element&lt;/span> ;
}
&lt;span style="color:#66d9ef">else&lt;/span>
&lt;span style="color:#a6e22e">local_maximum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">local_maximum&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">current_element&lt;/span> ;
&lt;span style="color:#a6e22e">global_maximum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(&lt;span style="color:#a6e22e">global_maximum&lt;/span>,&lt;span style="color:#a6e22e">local_maximum&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">global_maximum&lt;/span> ;
}, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">Infinity&lt;/span>);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please read about reduce function in JS if you don&amp;rsquo;t already know about
it.&lt;/p></content></item><item><title>LeetCode: 169 Majority Element</title><link>/posts/2020-02-16-leetcode-169-majority-element/</link><pubDate>Sun, 16 Feb 2020 11:36:00 +0530</pubDate><guid>/posts/2020-02-16-leetcode-169-majority-element/</guid><description>LEETCODE : 169. Majority Element Link
Problem Description :
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.
For example:
Example 1:
Input: [3,2,3] Output: 3   Example 2:
Input: [2,2,1,1,1,2,2] Output: 2 Explaination :
There is pretty easy way to solve it by using count of every element and then returning the element which has count greater than n/2 .</description><content>&lt;h2 id="leetcode--169-majority-element">LEETCODE : 169. Majority Element&lt;/h2>
&lt;p>&lt;a href="https://leetcode.com/problems/majority-element/">Link&lt;/a>&lt;/p>
&lt;p>&lt;strong>Problem Description :&lt;/strong>&lt;/p>
&lt;p>Given an array of size n, find the majority element. The majority element is
the element that appears more than ⌊ n/2 ⌋ times.&lt;/p>
&lt;p>You may assume that the array is non-empty and the majority element
always exist in the array.&lt;/p>
&lt;p>For example:&lt;br>
&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: [3,2,3]
Output: 3
&lt;/code>&lt;/pre>&lt;pre>&lt;code> 
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: [2,2,1,1,1,2,2]
Output: 2
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Explaination :&lt;/strong>&lt;/p>
&lt;p>There is pretty easy way to solve it by using count of every element and then returning the element which has count greater than n/2 .&lt;/p>
&lt;p>But this solution comes with a cost of O(n) time and O(n) space.&lt;/p>
&lt;p>There is a better solution which can do the job in O(n) time and O(1) space.
Atleast we are saving some of the space.
How does our space efficient algorithm works ?&lt;/p>
&lt;p>Basically, what we do is that we go on cancelling those elements which has a
counter element present, a counter element is an element whose value is
different from the current element. In other words, we can say that, we
cancel every element corresponding to every other uncancelled element
whose value is different.&lt;/p>
&lt;p>In C++ we can write it as below :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> majorityElement(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> nums) {
&lt;span style="color:#66d9ef">int&lt;/span> val&lt;span style="color:#f92672">=&lt;/span>nums[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;span style="color:#66d9ef">int&lt;/span> count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>nums.size(); i&lt;span style="color:#f92672">++&lt;/span>){
&lt;span style="color:#66d9ef">if&lt;/span>(count&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>){
val&lt;span style="color:#f92672">=&lt;/span>nums[i];
}
count &lt;span style="color:#f92672">+=&lt;/span> nums[i]&lt;span style="color:#f92672">==&lt;/span>val&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> ;
}
&lt;span style="color:#66d9ef">return&lt;/span> val;
}
};
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>LEETCODE : 171. Excel Sheet Column Number</title><link>/posts/2020-02-10-leetcode-171-excel-sheet-column-number/</link><pubDate>Mon, 10 Feb 2020 00:25:00 +0530</pubDate><guid>/posts/2020-02-10-leetcode-171-excel-sheet-column-number/</guid><description>LEETCODE : 171. Excel Sheet Column Number Link
Problem Description :
Given a column title as appear in an Excel sheet, return its corresponding column number.
For example:
A -&amp;gt; 1 B -&amp;gt; 2 C -&amp;gt; 3 ... Z -&amp;gt; 26 AA -&amp;gt; 27 AB -&amp;gt; 28 ... Example 1:
Input: &amp;quot;A&amp;quot; Output: 1  Example 2:
Input: &amp;quot;AB&amp;quot; Output: 28 Example 3:
Input: &amp;quot;ZY&amp;quot; Output: 701  Explaination :</description><content>&lt;h2 id="span-stylefont-family-quotverdanaquot--sans-serifleetcode--171-excel-sheet-column-numberspan">&lt;!-- raw HTML omitted -->LEETCODE : 171. Excel Sheet Column Number&lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>&lt;a href="https://leetcode.com/problems/excel-sheet-column-number">Link&lt;/a>&lt;/p>
&lt;p>&lt;strong>Problem Description :&lt;/strong>&lt;/p>
&lt;p>Given a column title as appear in an Excel sheet, return its corresponding
column number.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>
A -&amp;gt; 1
B -&amp;gt; 2
C -&amp;gt; 3
...
Z -&amp;gt; 26
AA -&amp;gt; 27
AB -&amp;gt; 28
...
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example 1:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Input: &amp;quot;A&amp;quot;
Output: 1 
 
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Input: &amp;quot;AB&amp;quot;
Output: 28
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 3:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Input: &amp;quot;ZY&amp;quot;
Output: 701 
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>Explaination :&lt;/strong>&lt;/p>
&lt;p>Initially it looks like a hard problem but when we get to know the logic behind it then it seems to be a really easy problem.&lt;/p>
&lt;p>The observation needed here is that, the column title value represents a
number of base 26. And all we need to do is to convert that base 26
number to base 10 number.&lt;/p>
&lt;p>To convert the base to base 10, we need to do what we usually do for binary
or octal converstions.&lt;/p>
&lt;p>&lt;em>For example :&lt;/em>&lt;/p>
&lt;pre tabindex="0">&lt;code>
BAD
B=2
A=1
D=4
 
2x(26)^2 + 1x(26) + 4x(26)^0 
= 1352
+ 26 + 4
=
1382
&lt;/code>&lt;/pre>&lt;p>&lt;strong>In C++ we can write it as below :&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> titleToNumber(string s) {
&lt;span style="color:#66d9ef">int&lt;/span> ans &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">long&lt;/span> pwr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
reverse(s.begin(), s.end()) ;
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">auto&lt;/span> c:s){
ans&lt;span style="color:#f92672">+=&lt;/span>(pwr&lt;span style="color:#f92672">*&lt;/span>(c&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>));
pwr&lt;span style="color:#f92672">=&lt;/span>pwr&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span>;
}
&lt;span style="color:#66d9ef">return&lt;/span> ans;
}
};
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>CodeChef : Breaking Bricks || Problem Code: BRKBKS</title><link>/posts/2020-01-26-codechef-breaking-bricks-problem-code-brkbks/</link><pubDate>Sun, 26 Jan 2020 01:14:00 +0530</pubDate><guid>/posts/2020-01-26-codechef-breaking-bricks-problem-code-brkbks/</guid><description>CodeChef : https://www.codechef.com/JAN20B/problems/BRKBKS
Problem: For her next karate demonstration, Ada will break some bricks.
Ada stacked three bricks on top of each other. Initially, their widths (from top to bottom) are W1,W2,W3.
Ada&amp;rsquo;s strength is S. Whenever she hits a stack of bricks, consider the largest k≥0 such that the sum of widths of the topmost k bricks does not exceed S; the topmost k bricks break and are removed from the stack.</description><content>&lt;p>CodeChef : &lt;a href="https://www.codechef.com/JAN20B/problems/BRKBKS">https://www.codechef.com/JAN20B/problems/BRKBKS&lt;/a>&lt;/p>
&lt;p>&lt;strong>Problem:&lt;/strong>
For her next karate demonstration, Ada will break some bricks.&lt;/p>
&lt;p>Ada stacked three bricks on top of each other. Initially, their widths
(from top to bottom) are W1,W2,W3.&lt;/p>
&lt;p>Ada&amp;rsquo;s strength is S. Whenever she hits a stack of bricks, consider the
largest k≥0 such that the sum of widths of the topmost k bricks does not
exceed S; the topmost k bricks break and are removed from the stack.
Before each hit, Ada may also decide to reverse the current stack of
bricks, with no cost.&lt;/p>
&lt;p>Find the minimum number of hits Ada needs in order to break all bricks
if she performs the reversals optimally. You are not required to
minimise the number of reversals.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The first and only line of each test case contains four space-separated integers S, W1, W2 and W3.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;p>For each test case, print a single line containing one integer ― the minimum
required number of hits.&lt;/p>
&lt;p>&lt;strong>Constraints&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1≤T≤64&lt;/li>
&lt;li>1≤S≤8&lt;/li>
&lt;li>1≤Wi≤2
for each valid i&lt;/li>
&lt;li>1≤Wi≤2
for each valid i&lt;br>
 
It is guaranteed that Ada can break all bricks&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;p>Input :&lt;/p>
&lt;pre tabindex="0">&lt;code>3
3 1 2 2
2 1 1 1
3 2 2 1
&lt;/code>&lt;/pre>&lt;p>Output :&lt;/p>
&lt;pre tabindex="0">&lt;code>
2
2
2
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Example Explanation :&lt;/strong>&lt;/p>
&lt;p>Example case 1: Ada can reverse the stack and then hit it two times.
Before the first hit, the widths of bricks in the stack (from top to
bottom) are (2,2,1). After the first hit, the topmost brick breaks and
the stack becomes (2,1). The second hit breaks both remaining bricks.&lt;/p>
&lt;p>In this particular case, it is also possible to hit the stack two times
without reversing. Before the first hit, it is (1,2,2). The first hit
breaks the two bricks at the top (so the stack becomes (2)) and the
second hit breaks the last brick.&lt;/p>
&lt;p>&lt;strong>Solution :&lt;/strong>&lt;/p>
&lt;p>This looks like a bit trivial problem of super easy category.And the logic is also too simple. All we need to do is that just think it in three parts, when Ada has enough strength to break all three blocks at a single hit, or in two hits or in three hits. There is no more than three hits needed
because we know that the number of blocks in fixed to three.&lt;/p>
&lt;p>Here is the C++ code for the problem :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">int&lt;/span> t;
cin &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> t;
&lt;span style="color:#66d9ef">int&lt;/span> s;
vector &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> w(&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;span style="color:#66d9ef">while&lt;/span> (t&lt;span style="color:#f92672">--&lt;/span>) {
cin &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> s &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> w[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> w[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> w[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;span style="color:#66d9ef">if&lt;/span> (s &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>) {
cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;span style="color:#66d9ef">continue&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span> (w[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> w[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> w[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> s) {
cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ((w[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> w[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> s) &lt;span style="color:#f92672">||&lt;/span> (w[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> w[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> s))
{
cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
} &lt;span style="color:#66d9ef">else&lt;/span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Tricky frontend questions</title><link>/posts/tricky-frontend-questions/</link><pubDate>Sat, 11 Jan 2020 12:30:00 +0000</pubDate><guid>/posts/tricky-frontend-questions/</guid><description>Q: How would you optimise your React app performance ?
A: https://www.telerik.com/blogs/5-techniques-optimizing-performance-react-app
Q : What is the second argument that can optionally be passed to setState and what is its purpose?
A: https://www.geeksforgeeks.org/what-is-the-second-argument-that-can-optionally-be-passed-to-setstate-and-what-is-its-purpose/
Q: What are refs in React? When to use them?
A: https://reactjs.org/docs/hooks-reference.html#useref
Q: What is the use of arrow function in react ?
A: https://dev.to/sag1v/javascript-the-this-key-word-in-depth-4pkm
Q: What are Pure Components ?</description><content>&lt;p>&lt;strong>Q:&lt;/strong> How would you optimise your React app performance ?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://www.telerik.com/blogs/5-techniques-optimizing-performance-react-app" title="https://www.telerik.com/blogs/5-techniques-optimizing-performance-react-app">https://www.telerik.com/blogs/5-techniques-optimizing-performance-react-app&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Q :&lt;/strong> What is the second argument that can optionally be passed to setState and what is its purpose?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://www.geeksforgeeks.org/what-is-the-second-argument-that-can-optionally-be-passed-to-setstate-and-what-is-its-purpose/" title="https://www.geeksforgeeks.org/what-is-the-second-argument-that-can-optionally-be-passed-to-setstate-and-what-is-its-purpose/">https://www.geeksforgeeks.org/what-is-the-second-argument-that-can-optionally-be-passed-to-setstate-and-what-is-its-purpose/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What are refs in React? When to use them?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://reactjs.org/docs/hooks-reference.html#useref" title="https://reactjs.org/docs/hooks-reference.html#useref">https://reactjs.org/docs/hooks-reference.html#useref&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What is the use of arrow function in react ?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://dev.to/sag1v/javascript-the-this-key-word-in-depth-4pkm" title="https://dev.to/sag1v/javascript-the-this-key-word-in-depth-4pkm">https://dev.to/sag1v/javascript-the-this-key-word-in-depth-4pkm&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What are Pure Components ?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://medium.com/technofunnel/working-with-react-pure-components-166ded26ae48" title="https://medium.com/technofunnel/working-with-react-pure-components-166ded26ae48">https://medium.com/technofunnel/working-with-react-pure-components-166ded26ae48&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> Explain the components of Redux&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A :&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Action&lt;/strong> — The action is the only source of information that sends data from our application to our store. Actions are sent the store using store.dispatch().&lt;/li>
&lt;li>&lt;strong>Reducer&lt;/strong> — Reducers specify how the app’s state changes in response to actions sent to the store. Since the actions don’t show the application’s state changes, this place determines how the state will change to an action.&lt;/li>
&lt;li>&lt;strong>Store&lt;/strong> — The Store is the object that brings Action and Reducer together. The store has the following responsibilities: Holds application state; Allows access to the state via getState(); Allows state to be updated via dispatch(action); Registers listeners via subscribe(listener); Handles unregistering of listeners via the function returned by subscribe (listener).&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What is Context?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://www.freecodecamp.org/news/react-context-for-beginners/" title="https://www.freecodecamp.org/news/react-context-for-beginners/">https://www.freecodecamp.org/news/react-context-for-beginners/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Q:&lt;/strong> What are HOCs ( Higher Order Components ) in react ?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A:&lt;/strong> &lt;a href="https://dev.to/codebucks/what-is-higher-order-component-hoc-in-react-2e1p" title="https://dev.to/codebucks/what-is-higher-order-component-hoc-in-react-2e1p">https://dev.to/codebucks/what-is-higher-order-component-hoc-in-react-2e1p&lt;/a>&lt;/p>
&lt;/blockquote></content></item><item><title>CodeChef OCT17 : Problem Code: PERFCONT</title><link>/posts/2017-10-22-codechef-oct17-problem-code-perfcont/</link><pubDate>Sun, 22 Oct 2017 16:21:00 +0530</pubDate><guid>/posts/2017-10-22-codechef-oct17-problem-code-perfcont/</guid><description>Problem:
Chef wants to organize a contest. Predicting difficulty levels of the problems can be a daunting task. Chef wants his contests to be balanced in terms of difficulty levels of the problems.
Assume a contest had total P participants. A problem that was solved by at least half of the participants (i.e. P / 2 (integer division)) is said to be cakewalk difficulty. A problem solved by at max P / 10 (integer division) participants is categorized to be a hard difficulty.</description><content>&lt;p>&lt;strong>Problem:&lt;/strong>&lt;br>
Chef wants to organize a contest. Predicting difficulty levels of the
problems can be a daunting task. Chef wants his contests to be balanced
in terms of difficulty levels of the problems.&lt;br>
Assume a contest had total &lt;strong>P&lt;/strong> participants. A problem that was solved
by at least half of the participants (i.e. &lt;strong>P / 2&lt;/strong> (integer division))
is said to be cakewalk difficulty. A problem solved by at max &lt;strong>P / 10&lt;/strong>
(integer division) participants is categorized to be a hard
difficulty.&lt;br>
Chef wants the contest to be balanced. According to him, a balanced
contest must have exactly 1 cakewalk and exactly 2 hard problems. You
are given the description of &lt;strong>N&lt;/strong> problems and the number of
participants solving those problems. Can you tell whether the contest
was balanced or not?&lt;/p>
&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;p>The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases.&lt;br>
The first line of each test case contains two space separated integers,
&lt;strong>N, P&lt;/strong> denoting the number of problems, number of participants
respectively.&lt;br>
The second line contains &lt;strong>N&lt;/strong> space separated integers, &lt;strong>i&lt;/strong>-th of
which denotes number of participants solving the &lt;strong>i&lt;/strong>-th problem.&lt;/p>
&lt;h3 id="span-stylecolor-redoutputspan">&lt;!-- raw HTML omitted -->Output&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>For each test case, output &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo; (without quotes) denoting
whether the contest is balanced or not.&lt;/p>
&lt;p>&lt;strong>Constraints&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1 ≤ &lt;strong>T, N&lt;/strong> ≤ 500&lt;/li>
&lt;li>1 ≤ &lt;strong>P&lt;/strong> ≤ 10&lt;!-- raw HTML omitted -->8&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>1 ≤ Number of participants solving a problem ≤ &lt;strong>P&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Subtasks&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Subtask #1&lt;/strong> (40 points): &lt;strong>P&lt;/strong> is a multiple of 10&lt;/li>
&lt;li>&lt;strong>Subtask #2&lt;/strong> (60 points): Original constraints&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>6
3 100
10 1 100
3 100
11 1 100
3 100
10 1 10
3 100
10 1 50
4 100
50 50 50 50
4 100
1 1 1 1
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>
yes
no
no
yes
no
no
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Explanation&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Example case 1.&lt;/strong>: The problems are of hard, hard and cakewalk
difficulty. There is 1 cakewalk and 2 hard problems, so the contest is
balanced.&lt;br>
&lt;strong>Example case 2.&lt;/strong>: The second problem is hard and the third is
cakewalk. There is 1 cakewalk and 1 hard problem, so the contest is not
balanced.&lt;br>
&lt;strong>Example case 3.&lt;/strong>: All the three problems are hard. So the contest is
not balanced.&lt;br>
&lt;strong>Example case 4.&lt;/strong>: The problems are of hard, hard, cakewalk
difficulty. The contest is balanced.&lt;br>
&lt;strong>Example case 5.&lt;/strong>: All the problems are cakewalk. The contest is not
balanced.&lt;br>
&lt;strong>Example case 6.&lt;/strong>: All the problems are hard. The contest is not
balanced.&lt;/p>
&lt;p>&lt;strong>Solution:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">int&lt;/span> t;
cin&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>t;
&lt;span style="color:#66d9ef">while&lt;/span>(t&lt;span style="color:#f92672">--&lt;/span>)
{
&lt;span style="color:#66d9ef">int&lt;/span> n, p,temp;
cin&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>n&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>p;
&lt;span style="color:#66d9ef">int&lt;/span> cake&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,hard&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span>(n&lt;span style="color:#f92672">--&lt;/span>)
{
cin&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>temp;
&lt;span style="color:#66d9ef">if&lt;/span>(temp &lt;span style="color:#f92672">&amp;gt;=&lt;/span> p&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>) cake&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(temp&lt;span style="color:#f92672">&amp;lt;=&lt;/span> p&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>) hard&lt;span style="color:#f92672">++&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span>(hard&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> and cake&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
cout&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;yes&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>endl;
&lt;span style="color:#66d9ef">else&lt;/span> cout&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>endl;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>HackerRank(greedy): Minimum Absolute Difference in an Array</title><link>/posts/2017-10-22-hackerrank-greedy-minimum-absolute-difference-in-an-array/</link><pubDate>Sun, 22 Oct 2017 16:15:00 +0530</pubDate><guid>/posts/2017-10-22-hackerrank-greedy-minimum-absolute-difference-in-an-array/</guid><description>Problem:
Consider an array of integers, A = a0, a1, a2&amp;hellip;.an-1. We define the absolute difference between two elements, ai and aj
(where ai not equal to aj ), to be the absolute value of ai-aj.
Given an array of n integers, find and print the minimum absolute difference between any two elements in the array.
Input Format
The first line contains a single integer denoting (the number of integers).</description><content>&lt;p>&lt;strong>Problem:&lt;/strong>&lt;/p>
&lt;p>Consider an array of integers, A = a0, a1, a2&amp;hellip;.an-1. We define the &lt;a href="https://en.wikipedia.org/wiki/Absolute_difference">absolute
difference&lt;/a> between
two elements, ai and aj&lt;br>
(where ai not equal to aj ), to be the &lt;a href="https://en.wikipedia.org/wiki/Absolute_value">absolute value&lt;/a>
of ai-aj.&lt;/p>
&lt;p>Given an array of n integers, find and print the minimum absolute difference between any two elements in the array.&lt;/p>
&lt;p>&lt;strong>Input Format&lt;/strong>&lt;/p>
&lt;p>The first line contains a single integer denoting (the number of integers).&lt;br>
The second line contains space-separated integers describing the respective values of a0, a1&amp;hellip;.an-1 .&lt;/p>
&lt;p>&lt;strong>Constraints&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>2 &amp;lt;= n &amp;lt;= 10^5&lt;/li>
&lt;li>-10^9 &amp;lt;= ai &amp;lt;= 10^9&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Output Format&lt;/strong>&lt;/p>
&lt;p>Print the minimum absolute difference between any two elements in the array.&lt;/p>
&lt;p>&lt;strong>Sample Input 0&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>3
3 -7 0
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Sample Output 0&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>3
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Solutions:&lt;/strong>
Note: Simple O(n^2) solution won&amp;rsquo;t work because of
time constraints. So, use this below O(N logN) solution which uses
sorting the array first, then uses O(N) to compare adjacent
differences.&lt;/p>
&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">
&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cmath&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;climits&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">int&lt;/span> n;
&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> min &lt;span style="color:#f92672">=&lt;/span> INT_MAX;
cin&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>n;
vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>arr(n);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n; i&lt;span style="color:#f92672">++&lt;/span>)
cin&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>arr[i];
sort(arr.begin(), arr.end());
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;i&lt;span style="color:#f92672">++&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span>(min&lt;span style="color:#f92672">&amp;gt;&lt;/span>abs(arr[i]&lt;span style="color:#f92672">-&lt;/span>arr[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]))
min&lt;span style="color:#f92672">=&lt;/span>abs(arr[i]&lt;span style="color:#f92672">-&lt;/span>arr[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]);
cout&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>min;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Codevita 2017 Round-1 Problem-C</title><link>/posts/2017-09-26-codevita-2017-round-1-problem-c/</link><pubDate>Tue, 26 Sep 2017 20:20:00 +0530</pubDate><guid>/posts/2017-09-26-codevita-2017-round-1-problem-c/</guid><description>Problem:CodeVita 2017 Round 1 Problem -C(download from below &amp;hellip; if any problem in downloading then comment) http://s000.tinyupload.com/?file_id=52952119059621072275Solution:
/* Author: Krishankant Ray * CodeVita 2017 Round 1 */ #include&amp;lt;iostream&amp;gt; #include&amp;lt;vector&amp;gt; using namespace std; int main() { int d,k=0; string arr; cin&amp;gt;&amp;gt;d; cin&amp;gt;&amp;gt;arr; int n=arr.length(); char R[n]; for(int f=0; f&amp;lt;n; ) { R[f]=arr[k++]; f+=((2*d)-2); } for(int i=1; i&amp;lt;d-1;i++) { R[i]=arr[k++]; for(int j=i; j&amp;lt;n;) { j+=((2*d)-2-(2*i)); R[j]=arr[k++]; j+=((2*i)); if(j&amp;lt;n) R[j]=arr[k++]; } } for(int l=d-1; l&amp;lt;n;l+=((2*d)-2)) { R[l]=arr[k++]; } for(int f=0; f&amp;lt;n;f++) { if(R[f]=='X') break; else cout&amp;lt;&amp;lt;R[f]; } return 0; }</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->CodeVita 2017
Round 1 Problem -C&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->(download from
below &amp;hellip;  if any problem in downloading then
comment) &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;a href="http://s000.tinyupload.com/?file_id=52952119059621072275">http://s000.tinyupload.com/?file_id=52952119059621072275&lt;/a>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Solution&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->:&lt;/p>
&lt;pre>&lt;code>/*
Author: Krishankant Ray
* CodeVita 2017 Round 1
*/
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;
int main()
{
int d,k=0;
string arr;
cin&amp;gt;&amp;gt;d;
cin&amp;gt;&amp;gt;arr;
int n=arr.length();
char R[n];
for(int f=0; f&amp;lt;n; )
{
R[f]=arr[k++];
f+=((2*d)-2);
}
for(int i=1; i&amp;lt;d-1;i++)
{
R[i]=arr[k++];
for(int j=i; j&amp;lt;n;)
{
j+=((2*d)-2-(2*i));
R[j]=arr[k++];
j+=((2*i));
if(j&amp;lt;n)
R[j]=arr[k++];
}
}
for(int l=d-1; l&amp;lt;n;l+=((2*d)-2))
{
R[l]=arr[k++];
}
for(int f=0; f&amp;lt;n;f++)
{
if(R[f]=='X')
break;
else
cout&amp;lt;&amp;lt;R[f];
}
return 0;
}
&lt;/code>&lt;/pre></content></item><item><title>CodeVita 2017 Round-1 Problem-B</title><link>/posts/2017-09-26-codevita-2017-round-1-problem-b/</link><pubDate>Tue, 26 Sep 2017 19:47:00 +0530</pubDate><guid>/posts/2017-09-26-codevita-2017-round-1-problem-b/</guid><description>Problem :Concatenating primesIf you like numbers, you may have been fascinated by prime numbers. Sometimes we obtain by concatenating two primes. For
example, concatenating 2 and 3, we obtain the prime 23. The aim is to find all such distinct &amp;ldquo;concatenated primes&amp;rdquo; that could
be obtained by concatenating primes ≤ a given integer N.
Input Format:Integer NOutput Format:M, the number of distinct primes that could be obtained by concatenating two primes ≤ NConstraints:N ≤ 70Example 1Input</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Problem :&lt;/strong>&lt;!-- raw HTML omitted --> Concatenating
primes&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
If you like numbers, you may have been fascinated by prime numbers.
Sometimes we obtain by concatenating two primes. For&lt;br>
example, concatenating 2 and 3, we obtain the prime 23. The aim is to
find all such distinct &amp;ldquo;concatenated primes&amp;rdquo; that could&lt;br>
be obtained by concatenating primes ≤ a given integer N.&lt;br>
 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Input Format:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Integer
N&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>Output
Format:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
M, the number of distinct primes that could be obtained by concatenating
two primes ≤ N&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>Constraints:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
N ≤ 70&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
Example 1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
Input&lt;br>
10&lt;br>
Output&lt;br>
4&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
Explanations&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
The primes ≤ 10 are 2, 3, 5, 7. These can be used to form the following
concatenated numbers: 22, 23, 25, 27, 32, 33, 35, 37,&lt;br>
52, 53, 55, 57, 72, 73, 75, 77. Of these, there are four primes: 23 37
53 and 73. Hence the output is 4.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
Example 2&lt;br>
Input&lt;br>
20&lt;br>
Output&lt;br>
17&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;strong>&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
The prime numbers up to 20 are 2 3 5 7 11 13 17 and 19.&lt;br>
Concatenating these two at a time in all possible ways, we get the
following numbers:&lt;br>
22 23 25 27 211 213 217 219&lt;br>
32 33 35 37 311 313 317 319&lt;br>
52 53 55 57 511 513 517 519&lt;br>
72 73 75 77 711 713 717 719&lt;br>
112 113 115 117 1111 1113 1117 1119&lt;br>
132 133 135 137 1311 1313 1317 1319&lt;br>
172 173 175 177 1711 1713 1717 1719&lt;br>
192 193 195 197 1911 1913 1917 1919&lt;br>
We have the following 17 primes numbers in this list: 23 37 53 73 113
137 173 193 197 211 311 313 317 719 1117 1319&lt;br>
1913 Hence the output would be 17.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
Note:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
Please do not use package and namespace in your code. For object
oriented languages your code should be written in one&lt;br>
class.&lt;br>
Note:&lt;br>
Participants submitting solutions in C language should not use functions
from &amp;lt;conio.h&amp;gt; / &amp;lt;process.h&amp;gt; as these files do not&lt;br>
exist in gcc&lt;br>
Note:&lt;br>
For C and C++, return type of main() function should be int.&lt;br>
A B C D E F&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Solution:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;set&amp;gt;
using namespace std;
int checkprime(int x)
{
int i=2;
while(i&amp;lt;=sqrt(x))
{
if(x%i==0)
return 0;
i++;
}
return 1;
}
int main()
{
int N,temp;
cin&amp;gt;&amp;gt;N;
vector&amp;lt;int&amp;gt;prime;
set&amp;lt;int&amp;gt;conc;
if(N&amp;gt;1)
{
for(int i=2;i&amp;lt;=N;i++)
if(checkprime(i) == 1)
prime.push_back(i);
for(int i =0; i&amp;lt;prime.size();i++)
{
for(int j=0; j&amp;lt;prime.size();j++)
{
if(int(prime[j]/10)==0)
{
temp=prime[i]*10+prime[j];
if(checkprime(temp)==1)
conc.insert(temp);
}
else if(int(prime[j]/10)!=0 &amp;amp;&amp;amp; int(prime[j]/100)==0)
{
temp=prime[i]*100+prime[j];
if(checkprime(temp)==1)
conc.insert(temp);
}
}
}
}
cout&amp;lt;&amp;lt;conc.size();
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>TCS-Codevita 2017 Round-1 Problem-A</title><link>/posts/2017-09-26-tcs-codevita-2017-round-1-problem-a/</link><pubDate>Tue, 26 Sep 2017 19:39:00 +0530</pubDate><guid>/posts/2017-09-26-tcs-codevita-2017-round-1-problem-a/</guid><description>**Problem : **Mountain peak sequence
Consider the first three natural numbers 1, 2, 3. These can be arranged in the following ways: 2, 3, 1 and 1, 3, 2. Inboth of
these arrangements, the numbers increase to a certain point and then decrease. A sequence with this property is called a
&amp;ldquo;mountain peak sequence&amp;rdquo;.
Given an integer N, write a program to find the remainder of mountain peak arrangements that can be obtained by rearranging</description><content>&lt;p>**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Problem :
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**Mountain peak sequence&lt;/p>
&lt;p>Consider the first three natural numbers 1, 2, 3. These can be arranged
in the following ways: 2, 3, 1 and 1, 3, 2. Inboth of&lt;br>
these arrangements, the numbers increase to a certain point and then
decrease. A sequence with this property is called a&lt;br>
&amp;ldquo;mountain peak sequence&amp;rdquo;.&lt;br>
Given an integer N, write a program to find the remainder of mountain
peak arrangements that can be obtained by rearranging&lt;br>
the numbers 1, 2, &amp;hellip;., N.&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Input
Format:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>One line containing the integer N&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Output
Format:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>An integer m, giving the remainder of the number of mountain peak
arrangements that could be obtained from 1, 2, &amp;hellip;., N is&lt;br>
divide by Mod&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Constraints&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>:&lt;/p>
&lt;p>Mod = 109+7&lt;br>
N ≤ 109&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Example
1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>Input&lt;br>
3&lt;br>
Output&lt;br>
2&lt;br>
Explanation&lt;br>
There are two such arrangements: 1, 3, 2 and 2, 3, 1&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Example
2&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>Input&lt;br>
4&lt;br>
Output&lt;br>
6&lt;br>
Explanation&lt;br>
The six arrangements are (1, 2, 4, 3), (1,3,4,2), (1,4,3,2), (2,3,4,1),
(2,4,3,1), (3,4,2,1)&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Note:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>Please do not use package and namespace in your code. For object
oriented languages your code should be written in one&lt;br>
class.&lt;br>
Note:&lt;br>
Participants submitting solutions in C language should not use functions
from &amp;lt;conio.h&amp;gt; / &amp;lt;process.h&amp;gt; as these files do not&lt;br>
exist in gcc&lt;br>
Note:&lt;br>
For C and C++, return type of main() function should be int.&lt;br>
&lt;!-- raw HTML omitted -->© 2017 Tata Consultancy Services
Limited. All Rights Reserved.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Solution:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;pre>&lt;code>/*
* CODEvita 2017 problem-A
* Author: krishankantray
*/
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;
int min(int a,int b)
{
return a&amp;gt;b?a:b ;
}
int bino(int n,int r,int p)
{
vector&amp;lt;int&amp;gt;C(r+1,0);
C[0]=1;
for(int i=1;i&amp;lt;=n;i++ )
{
for(int j=min(i,r);j&amp;gt;0;j--)
C[j]=(C[j] + C[j-1])%p;
}
return C[r];
}
int main()
{
int N,m=0;
int mod;
mod= 1000000007;
cin&amp;gt;&amp;gt;N;
for(int i=1;i&amp;lt;N-1;i++)
m+=bino(N-1,i,mod);
cout&amp;lt;&amp;lt;(m%mod);
return 0;
}
&lt;/code>&lt;/pre></content></item><item><title>Codechef SEPT17 CookOff - Subsequence Equality Problem Code: LIKECS01</title><link>/posts/2017-09-18-codechef-sept17-cookoff-subsequence-equality-problem-code-likecs01/</link><pubDate>Mon, 18 Sep 2017 00:46:00 +0530</pubDate><guid>/posts/2017-09-18-codechef-sept17-cookoff-subsequence-equality-problem-code-likecs01/</guid><description>Problem:(Link: https://www.codechef.com/problems/LIKECS01 ) Chef Tobby is playing a rapid fire with Bhuvan. He gives Bhuvan a string S and each time, Bhuvan has to guess whether there exists 2 equal subsequences in the string or not.
Bhuvan got a perfect score in the game with Chef Tobby. However, Chef Tobby has now asked Bhuvan to write a program that will do this automatically given a string S. Bhuvan is an intelligent man but he does not know how to write a code.</description><content>&lt;h3 id="span-stylecolor-redproblemspan-linkhttpswwwcodechefcomproblemslikecs01-">&lt;!-- raw HTML omitted -->Problem:&lt;!-- raw HTML omitted --> (Link: &lt;a href="https://www.codechef.com/problems/LIKECS01">https://www.codechef.com/problems/LIKECS01&lt;/a> )&lt;/h3>
&lt;p>Chef Tobby is playing a rapid fire with Bhuvan. He gives Bhuvan a string
&lt;strong>S&lt;/strong> and each time, Bhuvan has to guess whether there exists &lt;strong>2&lt;/strong>
equal &lt;a href="https://en.wikipedia.org/wiki/Subsequence">subsequences&lt;/a> in the
string or not.&lt;br>
Bhuvan got a perfect score in the game with Chef Tobby. However, Chef
Tobby has now asked Bhuvan to write a program that will do this
automatically given a string &lt;strong>S&lt;/strong>. Bhuvan is an intelligent man but he
does not know how to write a code. Can you help him?&lt;br>
Find two different subsequences such that they are equal in their value,
more formally, find two sequences of indices (a&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->,
a&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->, &amp;hellip;, a&lt;!-- raw HTML omitted -->k-1&lt;!-- raw HTML omitted -->, a&lt;!-- raw HTML omitted -->k&lt;!-- raw HTML omitted -->) and (b&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->,
b&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->, &amp;hellip;, b&lt;!-- raw HTML omitted -->k-1&lt;!-- raw HTML omitted -->, b&lt;!-- raw HTML omitted -->k&lt;!-- raw HTML omitted -->) such that:&lt;/p>
&lt;ol>
&lt;li>1≤ a&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->, b&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> ≤ |S|&lt;/li>
&lt;li>a&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; a&lt;!-- raw HTML omitted -->i+1&lt;!-- raw HTML omitted --> for all valid i&lt;/li>
&lt;li>b&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; b&lt;!-- raw HTML omitted -->i+1&lt;!-- raw HTML omitted --> for all valid i&lt;/li>
&lt;li>S&lt;!-- raw HTML omitted -->a&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> = S&lt;!-- raw HTML omitted -->b&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> for all valid
i&lt;/li>
&lt;li>there exist at least one i such that a&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> is not equal to
b&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ol>
&lt;h3 id="span-stylecolor-redinput-sectionspan">&lt;!-- raw HTML omitted -->Input section&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>The first line contains &lt;strong>T&lt;/strong>, the number of test cases.&lt;br>
Each of the next &lt;strong>T&lt;/strong> lines contain one string &lt;strong>S&lt;/strong> each.&lt;br>
&lt;strong>Input will only consist of lowercase english characters&lt;/strong>&lt;/p>
&lt;h3 id="span-stylecolor-redoutput-sectionspan">&lt;!-- raw HTML omitted -->Output section&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>For each test case, output &lt;strong>&amp;ldquo;yes&amp;rdquo;&lt;/strong> or &lt;strong>&amp;ldquo;no&amp;rdquo;&lt;/strong> (without quotes) as the
solution to the problem.&lt;/p>
&lt;h3 id="span-stylecolor-redinput-constraintsspan">&lt;!-- raw HTML omitted -->Input constraints&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>1 ≤ T ≤ 1000
1 ≤ length of S ≤ 100
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redsample-inputspan">&lt;!-- raw HTML omitted -->Sample Input&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>4
likecs
venivedivici
bhuvan
codechef
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redsample-outputspan">&lt;!-- raw HTML omitted -->Sample Output&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>no
yes
no
yes
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>In test case &lt;strong>2&lt;/strong>, one of the possible equal subsequence is &lt;strong>&amp;ldquo;vi&amp;rdquo;&lt;/strong>
and &lt;strong>&amp;ldquo;vi&amp;rdquo;&lt;/strong>. (one at position &lt;strong>{0, 3}&lt;/strong> and other at &lt;strong>{4, 7}&lt;/strong>,
assuming 0-based indexing).&lt;br>
In test case &lt;strong>4&lt;/strong>, one of the possible equal subsequence is &lt;strong>&amp;ldquo;ce&amp;rdquo;&lt;/strong>
and &lt;strong>&amp;ldquo;ce&amp;rdquo;&lt;/strong>. (one at position &lt;strong>{0, 3}&lt;/strong> and other at &lt;strong>{4, 6}&lt;/strong>,
assuming 0-based indexing).&lt;/p>
&lt;h3 id="span-stylecolor-redsolution-span">&lt;!-- raw HTML omitted -->Solution :&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;h3 id="heading">&lt;/h3>
&lt;h3 id="heading-1">&lt;/h3>
&lt;pre>&lt;code>#include &amp;lt;iostream&amp;gt;
#include &amp;lt;set&amp;gt;
using namespace std;
int main()
{
int t;
cin &amp;gt;&amp;gt; t;
while (t--) {
set&amp;lt;char&amp;gt; st;
string s;
cin &amp;gt;&amp;gt; s;
for (int i = 0; i &amp;lt; s.length(); i++)
st.insert(s[i]);
if (st.size() == s.length())
cout &amp;lt;&amp;lt; &amp;quot;no&amp;quot; &amp;lt;&amp;lt; endl;
else
cout &amp;lt;&amp;lt; &amp;quot;yes&amp;quot; &amp;lt;&amp;lt; endl;
}
return 0;
}
&lt;/code>&lt;/pre></content></item><item><title>Codechef - Courses in an university - Problem Code: UNICOURS</title><link>/posts/2017-09-14-codechef-courses-in-an-university-problem-code-unicours/</link><pubDate>Thu, 14 Sep 2017 23:39:00 +0530</pubDate><guid>/posts/2017-09-14-codechef-courses-in-an-university-problem-code-unicours/</guid><description>Problem There are n courses in a university being offered. These courses are numbered from 1 to n in the increasing order of their difficulty. For each course, you can have some courses as prerequisites. The prerequisite courses for a course should be of lower difficulty than it. You are given an array a of size n, where aidenotes that there should be at least aiprerequisite courses for i-th course.</description><content>&lt;h3 id="span-stylecolor-redproblemspan">&lt;!-- raw HTML omitted -->Problem&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>There are &lt;strong>n&lt;/strong> courses in a university being offered. These courses are
numbered from 1 to &lt;strong>n&lt;/strong> in the increasing order of their difficulty.
For each course, you can have some courses as prerequisites. The
prerequisite courses for a course should be of lower difficulty than it.
You are given an array &lt;strong>a&lt;/strong> of size &lt;strong>n&lt;/strong>, where &lt;strong>a&lt;/strong>&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->
denotes that there should be at least &lt;strong>a&lt;/strong>&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> prerequisite
courses for i-th course.&lt;br>
The university wants to estimate the efficiency of the allocation of
prerequisites of courses by maximizing the number of courses that are
not prerequisites for any other course. Find out what&amp;rsquo;s the maximum such
number of courses possible. It is guaranteed that &lt;strong>a&lt;/strong>&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt;
i, thus making sure that it is possible to allocate the prerequisites
for each of the course.&lt;/p>
&lt;h3 id="span-stylecolor-redinputspan">&lt;!-- raw HTML omitted -->Input&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases. The description of &lt;strong>T&lt;/strong> test cases follows.&lt;br>
The first line of each test case contains an integer &lt;strong>n&lt;/strong>.&lt;br>
The second line of each test case contains &lt;strong>n&lt;/strong> space separated
integers denoting array &lt;strong>a&lt;/strong>.&lt;/p>
&lt;h3 id="span-stylecolor-redoutputspan">&lt;!-- raw HTML omitted -->Output&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>For each test case, output a single line containing an integer
corresponding to the maximum number of possible courses which are not
prerequisite for any other course.&lt;/p>
&lt;h3 id="span-stylecolor-redconstraintsspan">&lt;!-- raw HTML omitted -->Constraints&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>T&lt;/strong> ≤ &lt;strong>10&lt;/strong>&lt;/li>
&lt;li>1 ≤ &lt;strong>n&lt;/strong> ≤ 10&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>0 ≤ &lt;strong>a&lt;/strong>&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; i&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redsubtasksspan">&lt;!-- raw HTML omitted -->Subtasks&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Subtask #1&lt;/strong> (40 points) : 1 ≤ &lt;strong>n&lt;/strong> ≤ 100&lt;/li>
&lt;li>&lt;strong>Subtask #2&lt;/strong> (60 points) : original constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
2
3
0 1 1
3
0 1 2
Output:
2
1 
 
 
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redsolution-span">&lt;!-- raw HTML omitted -->Solution :&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;h3 id="span-stylecolor-red-span">&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;h3 id="heading">&lt;/h3>
&lt;pre>&lt;code>#include&amp;lt;iostream&amp;gt;
#include&amp;lt;climits&amp;gt;
using namespace std;
int main()
{
int t;
cin&amp;gt;&amp;gt;t;
while(t--)
{
int n,max=INT_MIN;
cin&amp;gt;&amp;gt;n;
int A[n];
for(int i=0; i&amp;lt;n; i++)
{
cin&amp;gt;&amp;gt;A[i];
if(A[i]&amp;gt;max)
max=A[i];
}
cout&amp;lt;&amp;lt;(n-max)&amp;lt;&amp;lt;endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redspan">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/h3></content></item><item><title>Codechef MAY17 chef and his daily routine ( code: CHEFROUT )</title><link>/posts/2017-09-14-codechef-may17-chef-and-his-daily-routine-code-chefrout/</link><pubDate>Thu, 14 Sep 2017 18:01:00 +0530</pubDate><guid>/posts/2017-09-14-codechef-may17-chef-and-his-daily-routine-code-chefrout/</guid><description>Problem : https://www.codechef.com/problems/CHEFROUT Chef&amp;rsquo;s daily routine is very simple. He starts his day with cooking food, then he eats the food and finally proceeds for sleeping thus ending his day. Chef carries a robot as his personal assistant whose job is to log the activities of Chef at various instants during the day. Today it recorded activities that Chef was doing at N different instants. These instances are recorded in chronological order (in increasing order of time).</description><content>&lt;h3 id="span-stylecolor-redproblem-span-httpswwwcodechefcomproblemschefrout">&lt;!-- raw HTML omitted -->Problem &lt;!-- raw HTML omitted -->: &lt;a href="https://www.codechef.com/problems/CHEFROUT">https://www.codechef.com/problems/CHEFROUT&lt;/a>&lt;/h3>
&lt;p>Chef&amp;rsquo;s daily routine is very simple. He starts his day with cooking
food, then he eats the food and finally proceeds for sleeping thus
ending his day. Chef carries a robot as his personal assistant whose job
is to log the activities of Chef at various instants during the day.
&lt;strong>Today&lt;/strong> it recorded activities that Chef was doing at N different
instants. These instances are recorded in chronological order (in
increasing order of time). This log is provided to you in form of a
string &lt;strong>s&lt;/strong> of length N, consisting of characters &amp;lsquo;C&amp;rsquo;, &amp;lsquo;E&amp;rsquo; and &amp;lsquo;S&amp;rsquo;. If
&lt;strong>s&lt;/strong>[i] = &amp;lsquo;C&amp;rsquo;, then it means that at the i-th instant Chef was
cooking, &amp;lsquo;E&amp;rsquo; denoting he was eating and &amp;lsquo;S&amp;rsquo; means he was sleeping.&lt;br>
You have to tell whether the record log made by the robot could possibly
be correct or not.&lt;/p>
&lt;h3 id="span-stylecolor-redinputspan">&lt;!-- raw HTML omitted -->Input&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases. The description of &lt;strong>T&lt;/strong> test cases follows.&lt;br>
The only line of each test case contains string &lt;strong>s&lt;/strong>.&lt;/p>
&lt;h3 id="span-stylecolor-redoutputspan">&lt;!-- raw HTML omitted -->Output&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>For each test case, output a single line containing &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo;
(without quotes) accordingly.&lt;/p>
&lt;h3 id="span-stylecolor-redconstraintsspan">&lt;!-- raw HTML omitted -->Constraints&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;ul>
&lt;li>1 ≤ &lt;strong>T&lt;/strong> ≤ 20&lt;/li>
&lt;li>1 ≤ N ≤ 10&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redsubtasksspan">&lt;!-- raw HTML omitted -->Subtasks&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Subtask #1&lt;/strong> (40 points) : 1 ≤ N ≤ 100&lt;/li>
&lt;li>&lt;strong>Subtask #2&lt;/strong> (60 points) : original constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
5
CES
CS
CCC
SC
ECCC
Output:
yes
yes
yes
no
no
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Example case 1.&lt;/strong> &amp;ldquo;CES&amp;rdquo; can correspond to a possible record of
activities of Chef. He starts the day with cooking, then eating and then
sleeping.&lt;br>
&lt;strong>Example case 2.&lt;/strong> &amp;ldquo;CS&amp;rdquo; can also correspond to a possible record of
activities of Chef. He starts the day with cooking, then eating and then
sleeping. Robot recorded his cooking and sleeping in order. He might not
have recorded his eating activity.&lt;br>
&lt;strong>Example case 4.&lt;/strong> &amp;ldquo;SC&amp;rdquo; can not correspond to Chef&amp;rsquo;s activities. Here
it means that Chef slept first, then he cooked the food, which is
impossible for Chef to do on some particular day.&lt;/p>
&lt;h3 id="span-stylecolor-redsolution-span">&lt;!-- raw HTML omitted -->Solution &lt;!-- raw HTML omitted -->:&lt;/h3>
&lt;h3 id="heading"> &lt;/h3>
&lt;pre>&lt;code>#include &amp;lt;iostream&amp;gt;
using namespace std;
int main()
{
int t;
cin &amp;gt;&amp;gt; t;
while (t--) {
string s;
cin &amp;gt;&amp;gt; s;
bool flag = true;
for (int i = 1; i &amp;lt; s.length(); i++)
if (s[i] &amp;lt; s[i - 1]) {
flag = false;
break;
}
if (flag == true)
cout &amp;lt;&amp;lt; &amp;quot;yes&amp;quot; &amp;lt;&amp;lt; endl;
else
cout &amp;lt;&amp;lt; &amp;quot;no&amp;quot; &amp;lt;&amp;lt; endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;h3 id="heading-1">&lt;/h3>
&lt;h3 id="heading-2">&lt;/h3></content></item><item><title>ProjectEuler -01 Multiple of 3 and 5</title><link>/posts/2017-09-13-projecteuler-01-multiple-of-3-and-5/</link><pubDate>Wed, 13 Sep 2017 16:56:00 +0530</pubDate><guid>/posts/2017-09-13-projecteuler-01-multiple-of-3-and-5/</guid><description>PROBLEM : https://www.hackerrank.com/contests/projecteuler/challenges/euler001If we list all the natural numbers below that are multiples of or , we get and . The sum of these multiples is .
Find the sum of all the multiples of or below .
Input FormatFirst line contains that denotes the number of test cases. This is followed by lines, each containing an integer, .
Constraints
Output FormatFor each test case, print an integer that denotes the sum of all the multiples of or below .</description><content>&lt;p>&lt;!-- raw HTML omitted -->PROBLEM &lt;!-- raw HTML omitted -->:  &lt;!-- raw HTML omitted -->&lt;a href="https://www.hackerrank.com/contests/projecteuler/challenges/euler001">https://www.hackerrank.com/contests/projecteuler/challenges/euler001&lt;/a>&lt;!-- raw HTML omitted -->&lt;br>
If we list all the natural numbers below &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
that are multiples of &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
or &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
we get &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
and &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.
The sum of these multiples is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;br>
Find the sum of all the multiples of &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
or &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
below &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Input Format&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>First line contains &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
that denotes the number of test cases. This is followed by &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
lines, each containing an integer, &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>&lt;strong>Constraints&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Output Format&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>For each test case, print an integer that denotes the sum of all the
multiples of &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
or &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
below &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Sample Input 0&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>2
10
100
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Sample Output 0&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>23
2318
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Explanation 0&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>For &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
if we list all the natural numbers below &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
that are multiples of &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
or &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
we get &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
and &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.
The sum of these multiples is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;br>
Similarly for &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
we get &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Solution :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;iostream&amp;gt;
using namespace std;
int main()
{
int t;
cin &amp;gt;&amp;gt; t;
while (t--) {
long long int n, x, y, z, m3, m5, m15, sum = 0;
cin &amp;gt;&amp;gt; n;
if (n % 3 == 0)
x = (n - 1) / 3;
else
x = n / 3;
if (n % 5 == 0)
y = (n - 1) / 5;
else
y = n / 5;
if (n % 15 == 0)
z = (n - 1) / 15;
else
z = n / 15;
m3 = (x * ((2 * 3) + (x - 1) * 3)) / 2;
m5 = (y * ((2 * 5) + (y - 1) * 5)) / 2;
m15 = (z * ((2 * 15) + (z - 1) * 15)) / 2;
sum = m3 + m5 - m15;
cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;
sum = 0;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>CodeChef SEPT17 Sereja and Commands (code: SEACO)</title><link>/posts/2017-09-11-codechef-sept17-sereja-and-commands-code-seaco/</link><pubDate>Mon, 11 Sep 2017 20:15:00 +0530</pubDate><guid>/posts/2017-09-11-codechef-sept17-sereja-and-commands-code-seaco/</guid><description>Problem: Little Chef and Sum https://www.codechef.com/SEPT17/problems/SEACOSereja has an array A consisting of n integers. Initially, all the elements of array are zero.
Sereja writes down m commands on a piece of a paper. The commands are enumerated from 1 to m. These commands can be of the following two types of commands:
l r (l ≤ l ≤ r ≤ n) — Increase all elements of the array by one, whose indices belongs to the range [l, r] l r (1 ≤ l ≤ r ≤ m) — Execute all the commands whose indices are in the range [l, r].</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem: Little
Chef and Sum &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="https://www.codechef.com/SEPT17/problems/SEACO">https://www.codechef.com/SEPT17/problems/SEACO&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Sereja has an array &lt;strong>A&lt;/strong> consisting of &lt;strong>n&lt;/strong> integers. Initially, all
the elements of array are zero.&lt;br>
Sereja writes down &lt;strong>m&lt;/strong> commands on a piece of a paper. The commands
are enumerated from &lt;strong>1&lt;/strong> to &lt;strong>m&lt;/strong>. These commands can be of the
following two types of commands:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>l r (l ≤ l ≤ r ≤ n)&lt;/strong> — Increase all elements of the array by one,
whose indices belongs to the range &lt;strong>[l, r]&lt;/strong>&lt;/li>
&lt;li>&lt;strong>l r (1 ≤ l ≤ r ≤ m)&lt;/strong> — Execute all the commands whose indices are
in the range &lt;strong>[l, r]&lt;/strong>. It&amp;rsquo;s guaranteed that &lt;strong>r&lt;/strong> is strictly
less than the enumeration/number of the current command.&lt;/li>
&lt;/ul>
&lt;p>Can you please help Sereja in executing all the commands written on this
piece of paper.&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases. The description of &lt;strong>T&lt;/strong> test cases follows.&lt;br>
The first line contains integers &lt;strong>n&lt;/strong> and &lt;strong>m&lt;/strong>. Next &lt;strong>m&lt;/strong> lines
contain Sereja&amp;rsquo;s commands in the format, described in statement: &lt;strong>t&lt;/strong>,
&lt;strong>l&lt;/strong>, &lt;strong>r&lt;/strong>, where &lt;strong>t&lt;/strong> - number of type (1 or 2).&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->For each
test case on different lines print an array &lt;strong>a&lt;/strong>, after executing all
the commands. The numbers have to be separated by spaces. As the numbers
can be quite large, print them modulo       &lt;strong>10&lt;!-- raw HTML omitted -->9&lt;!-- raw HTML omitted --> + 7&lt;/strong>.&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>T&lt;/strong> ≤ &lt;strong>3&lt;/strong>&lt;/li>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>n, m&lt;/strong> ≤ &lt;strong>10&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Subtask :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p> &lt;/p>
&lt;ul>
&lt;li>Subtask #&lt;strong>1&lt;/strong> (20 points): 1 ≤ &lt;strong>n, m&lt;/strong> ≤ 10&lt;/li>
&lt;li>Subtask #&lt;strong>2&lt;/strong> (30 points): 1 ≤ &lt;strong>n, m&lt;/strong> ≤ 1000&lt;/li>
&lt;li>Subtask #&lt;strong>3&lt;/strong> (50 points): original constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
3
5 5
1 1 2
1 4 5
2 1 2
2 1 3
2 3 4
1 2
1 1 1
1 1 1
10 10
1 1 10
2 1 1
2 1 2
2 1 3
2 1 4
2 1 5
2 1 6
2 1 7
2 1 8
2 1 9
Output:
7 7 0 7 7
2
512 512 512 512 512 512 512 512 512 512
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Example case 1.&lt;/strong>.&lt;br>
After the first command, the resulting array is [1 1 0 0 0], after
second [1 1 0 1 1].&lt;br>
On third command, we repeat the 1&amp;rsquo;st and the 2&amp;rsquo;nd command, so that
resulting array is [2 2 0 2 2].&lt;br>
After fourth command, the array will looks like [4 4 0 4 4].&lt;br>
Last command will apply 3&amp;rsquo;rd and 4&amp;rsquo;th commands, which by themselves will
apply 1&amp;rsquo;st, 2&amp;rsquo;nd, 1&amp;rsquo;st, 2&amp;rsquo;nd, 3&amp;rsquo;rd(1&amp;rsquo;st, 2&amp;rsquo;nd), so resulting arrays is
[7 7 0 7 7].&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->Solutions
:&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;pre>&lt;code> #include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;
void incr(int a[], int i, int j)
{
for(;i&amp;lt;=j;i++)
a[i]++;
}
void comm(int a[],int c[][3], int l, int r)
{
for(int i=l; i&amp;lt;=r;i++)
{
if(c[i][0]==1)
incr(a,c[i][1]-1, c[i][2]-1);
else
comm(a,c,c[i][1]-1, c[i][2]-1);
}
}
int main()
{
int t;
cin&amp;gt;&amp;gt;t;
while(t--)
{
int n,m,temp;
cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;
int a[n] ;
fill_n(a,n,0);
int c[m][3];
for(int i=0; i&amp;lt;m; i++)
{
cin&amp;gt;&amp;gt;c[i][0];
cin&amp;gt;&amp;gt;c[i][1];
cin&amp;gt;&amp;gt;c[i][2];
}
comm(a,c, 0, m-1);
for(int i=0; i&amp;lt;n; i++)
{
cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
}
cout&amp;lt;&amp;lt;endl;
}
return 0;
}
&lt;/code>&lt;/pre></content></item><item><title>CodeChef SEPT17 Chef and Pick Digit (code: CHEFPDIG)</title><link>/posts/2017-09-11-codechef-sept17-chef-and-pick-digit-code-chefpdig/</link><pubDate>Mon, 11 Sep 2017 20:07:00 +0530</pubDate><guid>/posts/2017-09-11-codechef-sept17-chef-and-pick-digit-code-chefpdig/</guid><description>Problem: Little Chef and Sum https://www.codechef.com/SEPT17/problems/CHEFPDIGChef likes to play with big numbers. Today, he has a big positive integer N. He can select any two digits from this number (the digits can be same but their positions should be different) and orders them in any one of the two possible ways. For each of these ways, he creates a two digit number from it (might contain leading zeros). Then, he will pick a character corresponding to the ASCII value equal to this number, i.</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem: Little
Chef and Sum &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="https://www.codechef.com/SEPT17/problems/CHEFPDIG">https://www.codechef.com/SEPT17/problems/CHEFPDIG&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Chef likes to play with big numbers. Today, he has a big positive
integer &lt;strong>N&lt;/strong>. He can select any two digits from this number (the digits
can be same but their positions should be different) and orders them in
any one of the two possible ways. For each of these ways, he creates a
two digit number from it (might contain leading zeros). Then, he will
pick a character corresponding to the ASCII value equal to this number,
i.e. the number 65 corresponds to &amp;lsquo;A&amp;rsquo;, 66 to &amp;lsquo;B&amp;rsquo; and so on till 90 for
&amp;lsquo;Z&amp;rsquo;. Chef is only interested in finding which of the characters in the
range &amp;lsquo;A&amp;rsquo; to &amp;lsquo;Z&amp;rsquo; can possibly be picked this way. &lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases.&lt;br>
The first line of the input contains an integer &lt;strong>N&lt;/strong>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->For each test case, output a string containing
characters Chef can pick &lt;strong>in sorted order&lt;/strong> If the resulting size of
string is zero, you should output a new line.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>T&lt;/strong> ≤ &lt;strong>10&lt;/strong>&lt;/li>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>N&lt;/strong> ≤ &lt;strong>10&lt;!-- raw HTML omitted -->100000&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Subtask :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p> &lt;/p>
&lt;ul>
&lt;li>&lt;em>Subtask #1 (40 points)&lt;/em> &lt;strong>N&lt;/strong> ≤ &lt;strong>10&lt;!-- raw HTML omitted -->10&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;li>&lt;em>Subtask #2 (60 points)&lt;/em> &lt;strong>Original Constraints&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
4
65
566
11
1623455078
Output:
A
AB
ACDFGHIJKLNPQRSTUVW
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Example case 1.&lt;/strong> Chef can pick digits &lt;strong>6&lt;/strong> and &lt;strong>5&lt;/strong> and create
integers 56 and 65. The integer 65 corresponds to &amp;lsquo;A&amp;rsquo;.&lt;br>
&lt;strong>Example case 2.&lt;/strong> Chef can pick digits &lt;strong>6&lt;/strong> and &lt;strong>5&lt;/strong> and create
&lt;strong>&amp;lsquo;A&amp;rsquo;&lt;/strong> as it equals &lt;strong>65&lt;/strong>. He can pick 6 and 6 (they are picked from
position 2 and position 3, respectively) to create &amp;lsquo;B&amp;rsquo; too. Hence answer
is &amp;ldquo;AB&amp;rdquo;.&lt;br>
&lt;strong>Example case 3.&lt;/strong> It&amp;rsquo;s not possible to create any character from &amp;lsquo;A&amp;rsquo;
to &amp;lsquo;Z&amp;rsquo;. Hence, we just print a new line.&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->Solutions
:&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;pre>&lt;code>#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;iterator&amp;gt;
using namespace std;
int main()
{
int t;
cin&amp;gt;&amp;gt;t;
while(t--)
{
long long unsigned int n,x;
cin&amp;gt;&amp;gt;n;
x=n;
vector&amp;lt;int&amp;gt;nums;
vector&amp;lt;char&amp;gt;alpha;
while(x !=0)
{
int a = x%10;
nums.push_back(a);
x /=10;
}
int p = nums.size();
for(int i=0; i&amp;lt;p; i++)
{
for(int j=0; j&amp;lt;p ;j++)
{
if(j != i)
{
int b = 10*nums[i] + nums[j];
char c = b;
if(b&amp;gt;=65 &amp;amp;&amp;amp; b&amp;lt;=90)
alpha.push_back(c);
b= 10*nums[j] + nums[i];
c= b;
if(b&amp;gt;=65 &amp;amp;&amp;amp; b&amp;lt;=90)
alpha.push_back(c);
}
}
}
sort(alpha.begin(), alpha.end());
vector&amp;lt;char&amp;gt;::iterator it;
it = unique(alpha.begin(), alpha.end());
alpha.resize(distance(alpha.begin(), it));
for(int i=0; i&amp;lt;alpha.size(); i++)
cout&amp;lt;&amp;lt;alpha[i];
cout&amp;lt;&amp;lt;endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p></content></item><item><title>CodeChef SEPT17 Little Chef and Sum ( code: CHEFSUM)</title><link>/posts/2017-09-11-codechef-sept17-little-chef-and-sum-code-chefsum/</link><pubDate>Mon, 11 Sep 2017 19:59:00 +0530</pubDate><guid>/posts/2017-09-11-codechef-sept17-little-chef-and-sum-code-chefsum/</guid><description>Problem: Little Chef and Sum https://www.codechef.com/SEPT17/problems/CHEFSUMOur little chef is fond of doing additions/sums in his free time. Today, he has an array A consisting of N positive integers and he will compute prefix and suffix sums over this array.
He first defines two functions prefixSum(i) and suffixSum(i) for the array as follows. The function prefixSum(i) denotes the sum of first i numbers of the array. Similarly, he defines suffixSum(i) as the sum of last N - i + 1 numbers of the array.</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem: Little
Chef and Sum &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="https://www.codechef.com/SEPT17/problems/CHEFSUM">https://www.codechef.com/SEPT17/problems/CHEFSUM&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Our little chef is fond of doing additions/sums in his free time. Today,
he has an array &lt;strong>A&lt;/strong> consisting of &lt;strong>N&lt;/strong> positive integers and he will
compute prefix and suffix sums over this array.&lt;br>
He first defines two functions &lt;strong>prefixSum(i)&lt;/strong> and &lt;strong>suffixSum(i)&lt;/strong> for
the array as follows. The function &lt;strong>prefixSum(i)&lt;/strong> denotes the sum of
first &lt;strong>i&lt;/strong> numbers of the array. Similarly, he defines &lt;strong>suffixSum(i)&lt;/strong>
as the sum of last &lt;strong>N - i + 1&lt;/strong> numbers of the array.&lt;br>
Little Chef is interested in finding the minimum index &lt;strong>i&lt;/strong> for which
the value &lt;strong>prefixSum(i) + suffixSum(i)&lt;/strong> is the minimum. In other
words, first you should minimize the value of &lt;strong>prefixSum(i) +
suffixSum(i)&lt;/strong>, and then find the least index &lt;strong>i&lt;/strong> for which this value
is attained.&lt;br>
Since, he is very busy preparing the dishes for the guests, can you help
him solve this problem?&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases.&lt;br>
The first line of each test case contains a single integer &lt;strong>N&lt;/strong>
denoting the number of integers in the array &lt;strong>A&lt;/strong>.&lt;br>
The second line contains &lt;strong>N&lt;/strong> space-separated integers
&lt;strong>A&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;/strong>, &lt;strong>A&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->&lt;/strong>, &amp;hellip;, &lt;strong>A&lt;!-- raw HTML omitted -->N&lt;!-- raw HTML omitted -->&lt;/strong> denoting
the array &lt;strong>A&lt;/strong>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->For each test case, output a single line containing
the answer.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>T&lt;/strong> ≤ &lt;strong>10&lt;/strong>&lt;/li>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>N, A[i]&lt;/strong> ≤ &lt;strong>10&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Subtask :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>  &lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Subtask #1 : (20 points)&lt;/strong> &lt;strong>1 ≤ N ≤ 100&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Subtask #2 : (80 points)&lt;/strong> Original constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
2
3
1 2 3
4
2 1 3 1
Output:
&lt;/code>&lt;/pre>
&lt;p> &lt;/p>
&lt;pre>&lt;code>1
2
 
 
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Example case 1.&lt;/strong> Let&amp;rsquo;s calculate prefixSum(i) + suffixSum(i) for all
indexes &lt;strong>i&lt;/strong> in the sample case.&lt;/p>
&lt;pre>&lt;code>prefixSum(1) + suffixSum(1) = 1 + 6 = 7
prefixSum(2) + suffixSum(2) = 3 + 5 = 8
prefixSum(3) + suffixSum(3) = 6 + 3 = 9
&lt;/code>&lt;/pre>
&lt;p>The minimum value of the function is 7, which is attained at index 1, so
the answer would be 1.&lt;br>
&lt;strong>Example case 2.&lt;/strong> Let&amp;rsquo;s calculate prefixSum(i) + suffixSum(i) for all
indexes &lt;strong>i&lt;/strong> in the sample case.&lt;/p>
&lt;pre>&lt;code>prefixSum(1) + suffixSum(1) = 2 + 7 = 9
prefixSum(2) + suffixSum(2) = 3 + 5 = 8
prefixSum(3) + suffixSum(3) = 6 + 4 = 10
prefixSum(4) + suffixSum(4) = 7 + 1 = 8
&lt;/code>&lt;/pre>
&lt;p>The minimum value of the function is 8, which is achieved for indices 2
and 4. The minimum of these two indices 2, 4 is index 2. Hence, the
answer will be 2.&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->Solutions :&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;br>
&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;pre>&lt;code> #include &amp;lt;iostream&amp;gt;
#include &amp;lt;climits&amp;gt;
using namespace std;
int main()
{
int t;
cin &amp;gt;&amp;gt; t;
while (t--) {
int N, sum = 0, pos = INT_MAX;
int small = INT_MAX;
cin &amp;gt;&amp;gt; N;
int arr[N];
for (int i = 0; i &amp;lt; N; i++) {
cin &amp;gt;&amp;gt; arr[i];
if (arr[i] &amp;lt; small) {
small = arr[i];
pos = i;
}
}
cout &amp;lt;&amp;lt; pos + 1 &amp;lt;&amp;lt; endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>CodeChef SEPT17 Problem: MINPERM</title><link>/posts/2017-09-03-codechef-sept17-problem-minperm/</link><pubDate>Sun, 03 Sep 2017 23:01:00 +0530</pubDate><guid>/posts/2017-09-03-codechef-sept17-problem-minperm/</guid><description>Problem:Minimum Good PermutationA permutation of length n is an array of size n consisting of n distinct integers in the range [1, n]. For example, (3, 2, 4, 1) is a permutation of length 4, but (3, 3, 1, 4) and (2, 3, 4, 5) are not, as (3, 3, 1, 4) contains duplicate elements, and (2, 3, 4, 5) contains elements not in range [1,4].
A permutation p of length n is good if and only if for any 1 ≤ i ≤ n, pi ≠ i.</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem:Minimum
Good Permutation&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>A permutation of length &lt;strong>n&lt;/strong> is an array of size &lt;strong>n&lt;/strong> consisting of
&lt;strong>n&lt;/strong> &lt;strong>distinct&lt;/strong> integers in the range &lt;strong>[1, n]&lt;/strong>. For example, (3,
2, 4, 1) is a permutation of length 4, but (3, 3, 1, 4) and (2, 3, 4, 5)
are not, as (3, 3, 1, 4) contains duplicate elements, and (2, 3, 4, 5)
contains elements not in range [1,4].&lt;br>
A permutation &lt;strong>p&lt;/strong> of length &lt;strong>n&lt;/strong> is &lt;em>good&lt;/em> if and only if for any
&lt;strong>1&lt;/strong> ≤ &lt;strong>i&lt;/strong> ≤ &lt;strong>n&lt;/strong>, &lt;strong>p&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;/strong> ≠ &lt;strong>i&lt;/strong>.&lt;br>
Please find the &lt;strong>lexicographically&lt;/strong> smallest &lt;em>good&lt;/em> permutation
&lt;strong>p&lt;/strong>.&lt;br>
&lt;strong>Definition for &amp;ldquo;lexicographically smaller&lt;/strong>&amp;quot;:&lt;br>
For two permutations &lt;strong>p&lt;/strong> and &lt;strong>q&lt;/strong>, we say that &lt;strong>p&lt;/strong> is
lexicographically smaller than &lt;strong>q&lt;/strong> if and only if there exists a index
&lt;strong>1&lt;/strong> ≤ &lt;strong>l&lt;/strong> ≤ &lt;strong>n&lt;/strong> such that:&lt;/p>
&lt;ul>
&lt;li>For any &lt;strong>1&lt;/strong> ≤ &lt;strong>i&lt;/strong> &amp;lt; &lt;strong>l&lt;/strong>, &lt;strong>p&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;/strong> =
&lt;strong>q&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;/strong>. Note that if &lt;strong>l&lt;/strong> = &lt;strong>1&lt;/strong>, this constraint means
nothing.&lt;/li>
&lt;li>and, &lt;strong>p&lt;!-- raw HTML omitted -->l&lt;!-- raw HTML omitted -->&lt;/strong> &amp;lt; &lt;strong>q&lt;!-- raw HTML omitted -->l&lt;!-- raw HTML omitted -->&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>For example, (2, 3, 1, 4) &amp;lt; (2, 3, 4, 1) &amp;lt; (3, 4, 1, 2). The
lexicographically smallest permutation is, of course, (1, 2, &amp;hellip;,
&lt;strong>n&lt;/strong>), though this one is not &lt;em>good&lt;/em>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
First line of the input contains an integer &lt;strong>T&lt;/strong> denoting number of
test cases.&lt;br>
For each test case, the only line contains an integer &lt;strong>n&lt;/strong>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
For each test case, output the lexicographically smallest &lt;em>good&lt;/em>
permutation of length &lt;strong>n&lt;/strong>. It&amp;rsquo;s guaranteed that this permutation
exists&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>T&lt;/strong> ≤ &lt;strong>10&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2&lt;/strong> ≤ &lt;strong>n&lt;/strong> ≤ &lt;strong>10&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Subtask :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Subtask #1 (17 points)&lt;/strong>: &lt;strong>2&lt;/strong> ≤ &lt;strong>n&lt;/strong> ≤ &lt;strong>9&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Subtask #2 (83 points)&lt;/strong>: Original Constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
4
2
3
5
6
Output:
2 1
2 3 1
2 1 4 5 3
2 1 4 3 6 5
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redspan">&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Example case 1.&lt;/strong> The only &lt;em>good&lt;/em> permutation of length 2 is (2, 1).&lt;br>
**Example case 2. **Consider all permutations of length 3, they are(in
lexicographically order):&lt;/p>
&lt;ul>
&lt;li>p = (1, 2, 3), it&amp;rsquo;s not good since p[1] = 1, p[2] = 2 and p[3]
= 3;&lt;/li>
&lt;li>p = (1, 3, 2), it&amp;rsquo;s not good since p[1] = 1;&lt;/li>
&lt;li>p = (2, 1, 3), it&amp;rsquo;s not good since p[3] = 3;&lt;/li>
&lt;li>p = (2, 3, 1), it&amp;rsquo;s good since p[1] ≠ 1, p[2] ≠ 2 and p[3] ≠
3;&lt;/li>
&lt;li>p = (3, 1, 2), it&amp;rsquo;s good since p[1] ≠ 1, p[2] ≠ 2 and p[3] ≠
3;&lt;/li>
&lt;li>p = (3, 2, 1), it&amp;rsquo;s not good since p[2] = 2.&lt;/li>
&lt;/ul>
&lt;p>Thus the minimum good one is (2, 3, 1).&lt;br>
&lt;strong>Example case 3.&lt;/strong> Consider two good permutations for third test case:
p=(2, 1, 4, 5, 3) and q=(2, 4, 1, 5, 3), then p &amp;lt; q. You can check
lexicographically condition as follows. Find the first index where the
entries of two permutations are different, and compare those entries.
For example, in this case, the first position where the entries differ
is index 2. You can see that p[2] &amp;lt; q[2], as 1 &amp;lt; 4, so p is
lexicographically smaller than q.&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->Solutions
:&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;h3 id="span-stylecolor-red-span">  &lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>#include&amp;lt;iostream&amp;gt;
using namespace std;
int main()
{
int t;
cin&amp;gt;&amp;gt;t;
while(t--)
{
int n,temp;
cin&amp;gt;&amp;gt;n;
int arr[n];
for(int i=0; i&amp;lt;n; i++)
arr[i]=i+1;
for(int i=1; i&amp;lt;n; i+=2)
{
if(arr[i] == i+1)
{
temp = arr[i];
arr[i]=arr[i-1];
arr[i-1]=temp;
}
}
for(int i=1; i&amp;lt;n; i++)
{
if(arr[i] == i+1)
{
temp = arr[i];
arr[i]=arr[i-1];
arr[i-1]=temp;
}
}
for(int i=0 ;i&amp;lt;n;i++)
cout&amp;lt;&amp;lt;arr[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
cout&amp;lt;&amp;lt;endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->** **&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>CodeChef SEPT17 Problem: CHEFSUM</title><link>/posts/2017-09-03-codechef-sept17-problem-chefsum/</link><pubDate>Sun, 03 Sep 2017 22:52:00 +0530</pubDate><guid>/posts/2017-09-03-codechef-sept17-problem-chefsum/</guid><description>Problem: Little Chef and SumsOur little chef is fond of doing additions/sums in his free time. Today, he has an array A consisting of N positive integers and he will compute prefix and suffix sums over this array.
He first defines two functions prefixSum(i) and suffixSum(i) for the array as follows. The function prefixSum(i) denotes the sum of first i numbers of the array. Similarly, he defines suffixSum(i) as the sum of last N - i + 1 numbers of the array.</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem: Little
Chef and Sums&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
Our little chef is fond of doing additions/sums in his free time. Today,
he has an array &lt;strong>A&lt;/strong> consisting of &lt;strong>N&lt;/strong> positive integers and he will
compute prefix and suffix sums over this array.&lt;br>
He first defines two functions &lt;strong>prefixSum(i)&lt;/strong> and &lt;strong>suffixSum(i)&lt;/strong> for
the array as follows. The function &lt;strong>prefixSum(i)&lt;/strong> denotes the sum of
first &lt;strong>i&lt;/strong> numbers of the array. Similarly, he defines &lt;strong>suffixSum(i)&lt;/strong>
as the sum of last &lt;strong>N - i + 1&lt;/strong> numbers of the array.&lt;br>
Little Chef is interested in finding the minimum index &lt;strong>i&lt;/strong> for which
the value &lt;strong>prefixSum(i) + suffixSum(i)&lt;/strong> is the minimum. In other
words, first you should minimize the value of &lt;strong>prefixSum(i) +
suffixSum(i)&lt;/strong>, and then find the least index &lt;strong>i&lt;/strong> for which this value
is attained.&lt;br>
Since, he is very busy preparing the dishes for the guests, can you help
him solve this problem?&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>The first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the
number of test cases.&lt;br>
The first line of each test case contains a single integer &lt;strong>N&lt;/strong>
denoting the number of integers in the array &lt;strong>A&lt;/strong>.&lt;br>
The second line contains &lt;strong>N&lt;/strong> space-separated integers
&lt;strong>A&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;/strong>, &lt;strong>A&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->&lt;/strong>, &amp;hellip;, &lt;strong>A&lt;!-- raw HTML omitted -->N&lt;!-- raw HTML omitted -->&lt;/strong> denoting
the array &lt;strong>A&lt;/strong>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>For each test case, output a single line containing the answer.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>T&lt;/strong> ≤ &lt;strong>10&lt;/strong>&lt;/li>
&lt;li>&lt;strong>1&lt;/strong> ≤ &lt;strong>N, A[i]&lt;/strong> ≤ &lt;strong>10&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Subtask\ :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Subtask #1 : (20 points)&lt;/strong> &lt;strong>1 ≤ N ≤ 100&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Subtask #2 : (80 points)&lt;/strong> Original constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
2
3
1 2 3
4
2 1 3 1
Output:
1
2
 
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redspan">&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Example case 1.&lt;/strong> Let&amp;rsquo;s calculate prefixSum(i) + suffixSum(i) for all
indexes &lt;strong>i&lt;/strong> in the sample case.&lt;/p>
&lt;pre>&lt;code>prefixSum(1) + suffixSum(1) = 1 + 6 = 7
prefixSum(2) + suffixSum(2) = 3 + 5 = 8
prefixSum(3) + suffixSum(3) = 6 + 3 = 9
&lt;/code>&lt;/pre>
&lt;p>The minimum value of the function is 7, which is attained at index 1, so
the answer would be 1.&lt;br>
&lt;strong>Example case 2.&lt;/strong> Let&amp;rsquo;s calculate prefixSum(i) + suffixSum(i) for all
indexes &lt;strong>i&lt;/strong> in the sample case.&lt;/p>
&lt;pre>&lt;code>prefixSum(1) + suffixSum(1) = 2 + 7 = 9
prefixSum(2) + suffixSum(2) = 3 + 5 = 8
prefixSum(3) + suffixSum(3) = 6 + 4 = 10
prefixSum(4) + suffixSum(4) = 7 + 1 = 8
&lt;/code>&lt;/pre>
&lt;p>The minimum value of the function is 8, which is achieved for indices 2
and 4. The minimum of these two indices 2, 4 is index 2. Hence, the
answer will be 2.&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->Solutions
:&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->// will update
soon&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;h3 id="span-stylecolor-redspan-1">&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong> &lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->** **&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>CodeChef (AUG17 LunchTime) : Mathison and pangrams - MATPAN</title><link>/posts/2017-08-30-codechef-aug17-lunchtime-mathison-and-pangrams-matpan/</link><pubDate>Wed, 30 Aug 2017 21:10:00 +0530</pubDate><guid>/posts/2017-08-30-codechef-aug17-lunchtime-mathison-and-pangrams-matpan/</guid><description>Problem: Mathison and pangramsMathison recently inherited an ancient papyrus that contained some text. Unfortunately, the text was not a pangram. Now, Mathison has a particular liking for holoalphabetic strings and the text bothers him. The good news is that Mathison can buy letters from the local store in order to turn his text into a pangram.
However, each letter has a price and Mathison is not very rich. Can you help Mathison find the cheapest way to obtain a pangram?</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem: Mathison
and pangrams&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Mathison recently inherited an ancient papyrus that contained some text.
Unfortunately, the text was not a &lt;strong>pangram&lt;/strong>. Now, Mathison has a
particular liking for holoalphabetic strings and the text bothers him.
The good news is that Mathison can buy letters from the local store in
order to turn his text into a pangram.&lt;br>
However, each letter has a price and Mathison is not very rich. Can you
help Mathison find the cheapest way to obtain a pangram?&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->The first line of the input file will contain one
integer, &lt;strong>T&lt;/strong>, representing the number of tests.&lt;/p>
&lt;p>Each test will be formed from two lines. The first one contains &lt;strong>26&lt;/strong>
space-separated integers, representing the prices of all letters. The
second will contain Mathison&amp;rsquo;s initial text (a string of &lt;strong>N&lt;/strong> lowercase
letters).&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>The output file will contain &lt;strong>T&lt;/strong> lines, one for each test. Each line
will contain the answer for the corresponding test.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>1 ≤ &lt;strong>T&lt;/strong> ≤ 10&lt;/li>
&lt;li>1 ≤ &lt;strong>N&lt;/strong> ≤ 50,000&lt;/li>
&lt;li>All prices are natural numbers between 1 and 1,000,000 (i.e.
10&lt;!-- raw HTML omitted -->6&lt;!-- raw HTML omitted -->).&lt;/li>
&lt;li>A pangram is a string that contains every letter of the Latin
alphabet at least once.&lt;/li>
&lt;li>All purchased letters are added to the end of the string&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Subtask :&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Subtask #1&lt;/strong>&lt;!-- raw HTML omitted --> (30 points):&lt;/p>
&lt;ul>
&lt;li>&lt;strong>N&lt;/strong> = 1&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Subtask #2&lt;/strong>&lt;!-- raw HTML omitted --> (70 points):&lt;/p>
&lt;ul>
&lt;li>Original constraints&lt;/li>
&lt;/ul>
&lt;h3 id="span-stylecolor-redexamplespan">&lt;!-- raw HTML omitted -->Example&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre>&lt;code>Input:
2
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
abcdefghijklmopqrstuvwz
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
thequickbrownfoxjumpsoverthelazydog
Output:
63
0 
 
 
&lt;/code>&lt;/pre>
&lt;h3 id="span-stylecolor-redexplanationspan">&lt;!-- raw HTML omitted -->Explanation&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>First test There are three letters missing from the original string: n
(price 14), x (price 24), and y (price 25). Therefore the answer is 14 +
24 + 25 = &lt;strong>63&lt;/strong>. &lt;/p>
&lt;p>Second test No letter is missing so there is no point in buying
something. The answer is &lt;strong>0.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->Solutions
:&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;pre>&lt;code>*
https://www.codechef.com/problems/MATPAN
*/
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;
int main()
{
int t;
cin &amp;gt;&amp;gt; t;
while (t--) {
char x = 'a';
vector&amp;lt;char&amp;gt; alpha;
vector&amp;lt;int&amp;gt; cost(26);
for (int i = 1; i &amp;lt;= 25; i++) {
alpha.push_back(x);
x = x + 1;
}
alpha.push_back(x);
//-----------------------------------
for (int i = 0; i &amp;lt; 26; i++)
cin &amp;gt;&amp;gt; cost[i];
string s;
cin &amp;gt;&amp;gt; s;
for (int i = 0; i &amp;lt; s.length(); i++) {
for (int j = 0; j &amp;lt; 26; j++)
if (s[i] == alpha[j] &amp;amp;&amp;amp; alpha[j] != '0')
alpha[j] = '0';
}
int sum = 0;
for (int i = 0; i &amp;lt; 26; i++) {
if (alpha[i] != '0')
sum += cost[i];
}
cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;
}
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted --> **&lt;/p></content></item><item><title>HackerRank - 101 Hack 51 - Fair Cake Cutting</title><link>/posts/2017-08-08-hackerrank-101-hack-51-fair-cake-cutting/</link><pubDate>Tue, 08 Aug 2017 00:25:00 +0530</pubDate><guid>/posts/2017-08-08-hackerrank-101-hack-51-fair-cake-cutting/</guid><description>Problem: Fair Cake CuttingLeha is a young man from Belarus. He loves cakes really much. In Leha&amp;rsquo;s country, cakes are always evenly divided between people.
Leha wants to know how many people he should invite to his party if he has a cake whose size is equal to units and he wants each person to get exactly units of cake. Note that Leha doesn&amp;rsquo;t take a piece for himself; in other words, the cake is only divided among the people he invited to the party.</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem: Fair
Cake Cutting&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Leha is a young man from Belarus. He loves cakes really much. In Leha&amp;rsquo;s
country, cakes are always evenly divided between people.&lt;br>
Leha wants to know how many people he should invite to his party if he
has a cake whose size is equal to &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
units and he wants each person to get &lt;em>exactly&lt;/em> &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
units of cake. Note that Leha doesn&amp;rsquo;t take a piece for himself; in other
words, the cake is only divided among the people he invited to the
party.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input Format&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>The first line contains three space-separated integers describing the
respective values of &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
and &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Constraints&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>It is guaranteed that the answer is an integer.&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output Format&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Print a single integer denoting &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
the number of people he should invite to his party.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Sample Input 0&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code> 
5 10 1
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->Sample Output 0&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code> 
2
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;strong>Explanation&lt;/strong>
0&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>In this sample case, &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
and &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.
Leha wants each person to get &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
units of cake. He has a cake whose size is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
unit, so if he invites &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
people and the cake is distributed evenly among them, each person gets
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->
units of cake. Therefore, the answer is b=2 .&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Solutions :
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;cmath&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;
int main() {
unsigned long int A,B,a,x;
double p;
cin&amp;gt;&amp;gt;A&amp;gt;&amp;gt;B&amp;gt;&amp;gt;a;
p=((B*a)/A);
x= floor(p);
cout&amp;lt;&amp;lt;x;
return 0;
}
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>TCS Code Vita 6 ( problem-B )</title><link>/posts/2017-07-31-tcs-code-vita-6-problem-b/</link><pubDate>Mon, 31 Jul 2017 21:03:00 +0530</pubDate><guid>/posts/2017-07-31-tcs-code-vita-6-problem-b/</guid><description>Problem : Concatenating primesIf you like numbers, you may have been fascinated by prime numbers. Sometimes we obtain by concatenating two primes. For example, concatenating 2 and 3, we obtain the prime 23. The aim is to find all such distinct &amp;ldquo;concatenated primes&amp;rdquo; that could be obtained by concatenating primes ≤ a given integer N.
**
Input Format:**Integer N
Output Format:
M, the number of distinct primes that could be obtained by concatenating two primes ≤ N</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Problem : Concatenating
primes&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>If you like numbers, you may have been fascinated by prime numbers.
Sometimes we obtain by concatenating two primes. For example,
concatenating 2 and 3, we obtain the prime 23. The aim is to find all
such distinct &amp;ldquo;concatenated primes&amp;rdquo; that could be obtained by
concatenating primes ≤ a given integer N.&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**&lt;br>
Input Format:**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Integer N&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Output
Format&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->:&lt;/p>
&lt;p>M, the number of distinct primes that could be obtained by concatenating
two primes ≤ N&lt;br>
Constraints:&lt;br>
N ≤ 70&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Example 1&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->Input&lt;br>
10&lt;br>
Output&lt;br>
4&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->** **&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**Explanations**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
The primes ≤ 10 are 2, 3, 5, 7. These can be used to form the following
concatenated numbers: 22, 23, 25, 27, 32, 33, 35, 37,&lt;br>
52, 53, 55, 57, 72, 73, 75, 77. Of these, there are four primes: 23 37
53 and 73. Hence the output is 4.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Example 2&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Input&lt;br>
20&lt;br>
Output&lt;br>
17&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Explanation&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>The prime numbers up to 20 are 2 3 5 7 11 13 17 and 19.&lt;br>
Concatenating these two at a time in all possible ways, we get the
following numbers:&lt;br>
22 23 25 27 211 213 217 219&lt;br>
32 33 35 37 311 313 317 319&lt;br>
52 53 55 57 511 513 517 519&lt;br>
72 73 75 77 711 713 717 719&lt;br>
112 113 115 117 1111 1113 1117 1119&lt;br>
132 133 135 137 1311 1313 1317 1319&lt;br>
172 173 175 177 1711 1713 1717 1719&lt;br>
192 193 195 197 1911 1913 1917 1919&lt;br>
We have the following 17 primes numbers in this list: 23 37 53 73 113
137 173 193 197 211 311 313 317 719 1117 1319 1913 .&lt;br>
Hence the output would be &lt;strong>17&lt;/strong>.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Solution:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
int checkprime(int n)
{
for (int i = 2; i &amp;lt; n; i++)
if (n % i == 0)
return 0;
return 1;
}
int main()
{
int N, temp, count = 0;
std::vector&amp;lt;int&amp;gt; primes;
std::cin &amp;gt;&amp;gt; N;
if (N &amp;gt; 2) { // ----------------------------------------------
primes.push_back(2);
primes.push_back(3);
for (int i = 4; i &amp;lt;= N; i++) {
if (checkprime(i) == 1)
primes.push_back(i);
}
for (std::vector&amp;lt;double&amp;gt;::size_type i = 0; i &amp;lt; primes.size(); i++) {
for (std::vector&amp;lt;double&amp;gt;::size_type j = 0; j &amp;lt; primes.size(); j++) {
if (primes[j] &amp;lt; 10)
temp = 10 * primes[i] + primes[j];
else
temp = 100 * primes[i] + primes[j];
if (checkprime(temp) == 1) {
count++;
}
}
} //------------------------------------------------------
std::cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;
for (std::vector&amp;lt;double&amp;gt;::size_type i = 0; i &amp;lt; primes.size(); i++)
std::cout &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; primes[i];
}
else if (N &amp;lt;= 2)
std::cout &amp;lt;&amp;lt; 0;
return 0;
}
&lt;/code>&lt;/pre></content></item><item><title>Codechef Probem : NITIKA</title><link>/posts/2017-07-10-codechef-probem-nitika/</link><pubDate>Mon, 10 Jul 2017 12:24:00 +0530</pubDate><guid>/posts/2017-07-10-codechef-probem-nitika/</guid><description>Problem :Link: ( https://www.codechef.com/JULY17/problems/NITIKA )
Nitika was once reading a history book and wanted to analyze it. So she asked her brother to create a list of names of the various famous personalities in the book. Her brother gave Nitika the list. Nitika was furious when she saw the list. The names of the people were not properly formatted. She doesn&amp;rsquo;t like this and would like to properly format it.A name can have at most three parts: first name, middle name and last name.</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Problem
:&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> Link: (
&lt;a href="https://www.codechef.com/JULY17/problems/NITIKA">https://www.codechef.com/JULY17/problems/NITIKA
)&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Nitika
was once reading a history book and wanted to analyze it. So she asked
her brother to create a list of names of the various famous
personalities in the book. Her brother gave Nitika the list. Nitika was
furious when she saw the list. The names of the people were not properly
formatted. She doesn&amp;rsquo;t like this and would like to properly format
it.&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->A name can
have at most three parts: first name, middle name and last name. It will
have at least one part. The last name is always present. The rules of
formatting a name are very simple: &lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->&lt;strong>Only&lt;/strong>
the first letter of each part of the name should be capital.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->All the
parts of the name except the last part should be represented by only
two characters. The first character should be the first letter of
the part and should be capitalized. The second character should be
&amp;ldquo;.&amp;rdquo;.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->gandhi
-&amp;gt; Gandhi &lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->mahatma
gandhI -&amp;gt; M. Gandhi &lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->Mohndas
KaramChand ganDhi -&amp;gt; M. K. Gandhi.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input
:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->The
first line of the input contains an integer &lt;strong>T&lt;/strong> denoting the number of
test cases.&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->The only
line of each test case contains the space separated parts of the
name.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Output
:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->For
each case, output the properly formatted name.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Constraint
:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->1
≤ &lt;strong>T&lt;/strong> ≤ 100&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->2
≤ Length of each part of the name ≤ 10&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->Each
part of the name contains the letters from lower and upper case
English alphabets (i.e. from &amp;lsquo;a&amp;rsquo; to &amp;lsquo;z&amp;rsquo;, or &amp;lsquo;A&amp;rsquo; to &amp;lsquo;Z&amp;rsquo;)&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Subtask
:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>Subtask #1
(40 points)&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->There is
exactly one part in the name.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Example
:&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>Input:
3
gandhi
mahatma gandhI
Mohndas KaramChand gandhi
Output:
Gandhi
M. Gandhi
M. K. Gandhi 
 
 
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Solution&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong> &lt;!-- raw HTML omitted -->&lt;em>(in C++)&lt;/em>&lt;!-- raw HTML omitted --> :&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cctype&amp;gt;
using namespace std;
int main()
{
int t;
cin &amp;gt;&amp;gt; t;
cin.ignore();
while (t--) {
string s;
getline(cin, s);
int x = 0;
for (int i = 0; i &amp;lt; s.length(); i++) {
if (s[i] == ' ') {
s[x] = toupper(s[x]);
x++;
s[x] = '.';
x++;
while (s[x] != ' ') {
s.erase(x, 1);
}
i = x;
x++;
}
}
s[x] = toupper(s[x]);
x++;
for (int k = x; k &amp;lt; s.length(); k++) {
s[k] = tolower(s[k]);
}
cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;
}
return 0;
}
&lt;/code>&lt;/pre></content></item><item><title>HackerRank Problem : Min Max Sum ( easy )</title><link>/posts/2017-07-06-hackerrank-problem-min-max-sum-easy/</link><pubDate>Thu, 06 Jul 2017 23:02:00 +0530</pubDate><guid>/posts/2017-07-06-hackerrank-problem-min-max-sum-easy/</guid><description>Problem : ( Link : Click here to visit this HackerRank problem page.)Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.Input FormatA single line of five space-separated integers.Constraints Each integer is in the inclusive range . Output FormatPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers.</description><content>&lt;hr>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem :  
( &lt;!-- raw HTML omitted -->&lt;/strong>&lt;em>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Link &lt;!-- raw HTML omitted -->: &lt;a href="https://www.hackerrank.com/challenges/mini-max-sum/problem">Click
here to visit this HackerRank problem
page.&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/em>&lt;strong>&lt;!-- raw HTML omitted -->
)&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Given
five positive integers, find the minimum and maximum values that can be
calculated by summing exactly four of the five integers. Then print the
respective minimum and maximum values as a single line of two
space-separated long integers.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Input
Format&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->A
single line of five space-separated integers.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Constraints&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->Each
integer is in the inclusive range &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Output
Format&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Print
two space-separated long integers denoting the respective minimum and
maximum values that can be calculated by summing exactly &lt;em>four&lt;/em> of the
five integers. (The output can be greater than 32 bit integer.)&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Sample
Input&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>1 2 3 4 5
 
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Sample
Output&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;pre>&lt;code>10 14
 
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Explanation&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Our
initial numbers are &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
&lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
and &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.
We can calculate the following sums using four of the five
integers:&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ol>
&lt;li>&lt;!-- raw HTML omitted -->If
we sum everything except &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
our sum is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->If
we sum everything except &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
our sum is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->If
we sum everything except &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
our sum is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->If
we sum everything except &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
our sum is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->If
we sum everything except &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->,
our sum is &lt;!-- raw HTML omitted -->&lt;img src="" alt="">&lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Solution :&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;em>(in C++ )&lt;/em>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;cmath&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;cstdio&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;vector&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;iostream&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;algorithm&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;cstdint&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->using&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->namespace&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->std&lt;!-- raw HTML omitted -->;&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->main&lt;!-- raw HTML omitted -->()&lt;br>
{&lt;br>
    &lt;!-- raw HTML omitted -->int64_t&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->[5];&lt;br>
    &lt;!-- raw HTML omitted -->int64_t&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->temp&lt;!-- raw HTML omitted -->, sum = 0;&lt;br>
    &lt;!-- raw HTML omitted -->for&lt;!-- raw HTML omitted --> (&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> = 0; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; 5; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->++)&lt;br>
        cin &amp;gt;&amp;gt; arr[i];&lt;br>
    sort(arr, arr + 5);&lt;br>
    &lt;!-- raw HTML omitted -->for&lt;!-- raw HTML omitted --> (&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> = 0; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; 4; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->++) {&lt;br>
        sum += arr[i];&lt;br>
    }&lt;br>
    cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &lt;!-- raw HTML omitted -->&amp;quot; &amp;ldquo;&lt;!-- raw HTML omitted -->;&lt;br>
    sum = 0;&lt;br>
    &lt;!-- raw HTML omitted -->for&lt;!-- raw HTML omitted --> (&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> = 1; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; 5; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->++) {&lt;br>
        sum += arr[i];&lt;br>
    }&lt;br>
    cout &amp;lt;&amp;lt; sum;&lt;/p>
&lt;p>    &lt;!-- raw HTML omitted -->return&lt;!-- raw HTML omitted --> 0;&lt;br>
}&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>HackerRank Problem : Reverse and capitalise first alphabet of each word.</title><link>/posts/2017-07-06-hackerrank-problem-reverse-and-capitalise-first-alphabet-of-each-word/</link><pubDate>Thu, 06 Jul 2017 22:36:00 +0530</pubDate><guid>/posts/2017-07-06-hackerrank-problem-reverse-and-capitalise-first-alphabet-of-each-word/</guid><description>* Problem : (Link :Click here to visit this problem on HackerRank. ) *
Reverse the words in a string and capitalize the first letter of each reversed word, preserving the capitalization in the original stri. For eg: &amp;ldquo;Hello World&amp;rdquo; would be transformed to &amp;ldquo;OlleH DlroW&amp;rdquo;.Input :The first line of input would be the number of test cases followed by each string in a line.Output :
Output should be the string with each word reversed and first letter of each reversed word capitalized.</description><content>&lt;p>* &lt;em>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Problem : &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;em>Link :&lt;/em>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="https://www.hackerrank.com/contests/codejam/challenges/reverse-words/problem">Click here to
visit this problem on
HackerRank.&lt;/a>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="https://www.hackerrank.com/contests/codejam/challenges/reverse-words/problem">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/a>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/em>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->*&lt;br>
&lt;!-- raw HTML omitted -->Reverse the
words in a string and capitalize the first letter of each reversed word,
preserving the capitalization in the original stri. For eg: &amp;ldquo;Hello
World&amp;rdquo; would be transformed to &amp;ldquo;OlleH DlroW&amp;rdquo;.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Input :&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->The
first line of input would be the number of test cases followed by each
string in a line.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Output
:&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Output
should be the string with each word reversed and first letter of each
reversed word capitalized. Each output string should be printed to a new
line.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Solution :
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;em>&lt;!-- raw HTML omitted -->( in C++ )&lt;!-- raw HTML omitted -->&lt;/em>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;iostream&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;string&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;algorithm&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->#include&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&amp;lt;cctype&amp;gt;&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->using&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->namespace&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->std&lt;!-- raw HTML omitted -->;&lt;br>
&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->main&lt;!-- raw HTML omitted -->()&lt;br>
{&lt;br>
    &lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->x&lt;!-- raw HTML omitted -->;&lt;br>
    cin &amp;gt;&amp;gt; x;&lt;/p>
&lt;p>    &lt;!-- raw HTML omitted -->for&lt;!-- raw HTML omitted --> (&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> = 0; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt; &lt;!-- raw HTML omitted -->x&lt;!-- raw HTML omitted -->; i++) {&lt;br>
        &lt;!-- raw HTML omitted -->string&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->line&lt;!-- raw HTML omitted -->;&lt;br>
        getline(cin, line);&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->*  *&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->*                  /* this is required to*
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->*&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->*eliminate* &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->trailing
whitespaces created due to  endline character of
cin&amp;gt;&amp;gt; *&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;em>*/&lt;/em>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->     &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->        &lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->       
getline(cin, line);&lt;/p>
&lt;p>        &lt;!-- raw HTML omitted -->&lt;em>//loop for reversing words&lt;/em>&lt;!-- raw HTML omitted -->&lt;br>
        &lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->j&lt;!-- raw HTML omitted --> = 0;&lt;br>
        &lt;!-- raw HTML omitted -->for&lt;!-- raw HTML omitted --> (&lt;!-- raw HTML omitted -->int&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> = 0; &lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted --> &amp;lt;= &lt;!-- raw HTML omitted -->line&lt;!-- raw HTML omitted -->.length(); i++)&lt;br>
            &lt;!-- raw HTML omitted -->if&lt;!-- raw HTML omitted --> (line[i] == ' ' || line[i] == &amp;lsquo;\0&amp;rsquo;) {&lt;/p>
&lt;p>                reverse(line.begin() + j, line.begin() + i);&lt;br>
                line[j] = toupper(line[j]);&lt;br>
                j = i + 1;&lt;br>
            }&lt;/p>
&lt;p>        cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; endl;&lt;br>
    }&lt;br>
    &lt;!-- raw HTML omitted -->return&lt;!-- raw HTML omitted --> 0;&lt;br>
}&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>My Github repository</title><link>/posts/2017-06-12-my-github-repository/</link><pubDate>Mon, 12 Jun 2017 03:05:00 +0530</pubDate><guid>/posts/2017-06-12-my-github-repository/</guid><description>Check out my github account for more programs :
https://github.com/krishankantray/</description><content>&lt;p>Check out my github account for more programs :&lt;/p>
&lt;p>&lt;a href="https://github.com/krishankantray/">https://github.com/krishankantray/&lt;/a>&lt;/p></content></item><item><title> A Simple C program to convert DECIMAL to BINARY</title><link>/posts/2017-01-23-a-simple-c-program-to-convert-decimal-to-binary/</link><pubDate>Mon, 23 Jan 2017 20:21:00 +0530</pubDate><guid>/posts/2017-01-23-a-simple-c-program-to-convert-decimal-to-binary/</guid><description>A Simple C program to convert DECIMAL to BINARY1#include&amp;lt;iostream&amp;gt;2#include&amp;lt;stdio.h&amp;gt;3using namespace std;4int main()5{6int n, arr[100] ;7int i=0,j;8cout&amp;lt;&amp;lt;&amp;ldquo;Enter the decimal number &amp;mdash;&amp;gt;&amp;rdquo; ;9cin&amp;gt;&amp;gt;n;10// using while loop to store in arr[]11while( (n/2) &amp;gt;=1)12{13arr[i++]= (n%2);14n=n/2;15}16if(n==3)17{18arr[i++]=1;19arr[i]=1;20}21else if(n==2)22arr[i]=0;23else if(n==1)24arr[i]=1;2526cout&amp;lt;&amp;lt;endl ;27for(j=i;j&amp;gt;=0;j&amp;ndash;)28cout&amp;lt;&amp;lt;arr[j];2930return 0;31}OUTPUT</description><content>&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->A Simple C program to convert
DECIMAL to BINARY&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted --> 
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->#include&amp;lt;iostream&amp;gt;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted --> 
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->#include&amp;lt;stdio.h&amp;gt;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->3&lt;!-- raw HTML omitted --> 
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->using
namespace &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->std&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->4&lt;!-- raw HTML omitted --> 
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->int
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->main&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->()&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted --> 
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->{&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->6&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->int
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->,
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->100&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->]
;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->7&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->int
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->0&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->,&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->j&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->8&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->cout&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&amp;lt;&amp;lt;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&amp;ldquo;Enter
the decimal number &amp;mdash;&amp;gt;&lt;!-- raw HTML omitted -->  &lt;!-- raw HTML omitted -->&amp;rdquo;
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->9&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->cin&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&amp;gt;&amp;gt;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->10&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->//
using while loop to store in arr[]&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->11&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->while&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->(
(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->/&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->)
&amp;gt;=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->)&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->12&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->{&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->13&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->++]=
(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->%&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->);&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->14&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->/&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->15&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->}&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->16&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->if&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->==&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->3&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->)&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->17&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->{&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->18&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->++]=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->19&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->]=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->20&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->}&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->21&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->else
if&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->==&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->)&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->22&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->]=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->0&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->23&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->else
if&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->==&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->)&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->24&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->]=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->25&lt;!-- raw HTML omitted -->  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->26&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->cout&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&amp;lt;&amp;lt;&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->endl
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->27&lt;!-- raw HTML omitted -->      &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->for&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->(&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->j&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->i&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->j&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&amp;gt;=&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->0&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->j&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&amp;ndash;)&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->28&lt;!-- raw HTML omitted -->          &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->cout&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&amp;lt;&amp;lt;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->arr&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->[&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->j&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->];&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->29&lt;!-- raw HTML omitted -->  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->30&lt;!-- raw HTML omitted -->  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->return
&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->0&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->31&lt;!-- raw HTML omitted -->  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->}&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->OUTPUT&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>
&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a href="../images/2017-01-23-a-simple-c-program-to-convert-decimal-to-binary-Capture.JPG">&lt;img src="../images/thumbnails/2017-01-23-a-simple-c-program-to-convert-decimal-to-binary-Capture.JPG" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p></content></item><item><title>Make USB flash drive a bootable media via Command Prompt</title><link>/posts/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt/</link><pubDate>Thu, 12 Jan 2017 20:01:00 +0530</pubDate><guid>/posts/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt/</guid><description>Follow the following steps :- Step I : Open command prompt as administrator
Step II: Type &amp;ldquo;diskpart&amp;rdquo; and hit enter
Step III: Type &amp;ldquo;list disk&amp;rdquo; and then press enter.
Step III: Check the disk number of you USB drive. ( in example it is 1 )
Step IV: Now, type &amp;ldquo;select disk 1&amp;rdquo; and then hit enter ( remember here 1 is the disk number)
Step V: `Now type &amp;ldquo;clean&amp;rdquo; and hit enter.</description><content>&lt;h2 id="span-stylebackground-color-444444span-stylecolor-whitefollow-the-following-steps--spanspan">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>Follow the following steps :-&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/h2>
&lt;hr>
&lt;p>Step I :  Open command prompt as administrator&lt;br>
               &lt;br>
   &lt;br>
&lt;a href="../images/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt-step1.jpg">&lt;img src="../images/thumbnails/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt-step1.jpg" alt="">&lt;/a>&lt;br>
Step II: Type &amp;ldquo;&lt;strong>diskpart&lt;/strong>&amp;rdquo; and hit enter&lt;br>
Step III: Type &amp;ldquo;&lt;strong>list disk&lt;/strong>&amp;rdquo; and then press enter.&lt;br>
Step III: Check the disk number of you USB drive. ( in example it is  1
)&lt;/p>
&lt;p>&lt;a href="../images/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt-Step2.jpg">&lt;img src="../images/thumbnails/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt-Step2.jpg" alt="">&lt;/a>&lt;/p>
&lt;p>Step IV: Now, type &amp;ldquo;&lt;strong>select disk 1&lt;/strong>&amp;rdquo; and then hit enter ( remember
here 1 is the disk number)&lt;br>
Step V: `Now type &amp;ldquo;&lt;strong>clean&lt;/strong>&amp;rdquo; and hit enter.&lt;br>
Step VI: Type &amp;ldquo;&lt;strong>create partition primary&lt;/strong>&amp;rdquo; and hit enter.&lt;br>
Step VII: Type &amp;ldquo;&lt;strong>select partition 1&lt;/strong>&amp;rdquo; and hit enter. ( here 1 is not
the disk number, whatever is your&lt;br>
                 disk number you have to write 1).&lt;br>
Step VIII: Type &amp;ldquo;&lt;strong>format fs=ntfs quick&lt;/strong>&amp;rdquo; and then hit enter.&lt;br>
Step IX: Type &amp;ldquo;&lt;strong>active&lt;/strong>&amp;rdquo; and hit enter.&lt;br>
Step X: Now, type &amp;ldquo;&lt;strong>exit&lt;/strong>&amp;rdquo; or just close the command prompt.&lt;br>
Step XI: Just copy the files from Windows OS DVD to your USB flash
drive.&lt;/p>
&lt;p>&lt;a href="../images/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt-step3.jpg">&lt;img src="../images/thumbnails/2017-01-12-make-usb-flash-drive-a-bootable-media-via-command-prompt-step3.jpg" alt="">&lt;/a>&lt;/p>
&lt;p>Step XII: Restart your computer and set your boot menu to boot via
USB.&lt;br>
Step XIII: Thats all, you are done, your can install windows OS to your
computer.&lt;/p></content></item><item><title>Bypass Windows User Login</title><link>/posts/2016-01-25-bypass-windows-user-login/</link><pubDate>Mon, 25 Jan 2016 19:06:00 +0530</pubDate><guid>/posts/2016-01-25-bypass-windows-user-login/</guid><description>Bypass Microsoft Windows User Login  Step I:Get any Linux Distribution live bootable disk (generally all Linux Distros comes with live boot option). If you don&amp;rsquo;t have bootable disk download it from the respective website. Although Ubuntu is most popular Linux distribution. You can download Ubuntu from :http://www.ubuntu.com/download/desktop( select the latest version according to your cpu artitecture viz. 32 bit or 64 bit). After download, you can burn it DVD or a USB flash drive).</description><content>&lt;!-- raw HTML omitted -->
&lt;h2 id="span-stylebackground-color-f1c232span-stylecolor-3d85c6bypass-microsoft-windows-user-loginspanspan-stylecolor-20124dspanspan-stylecolor-20124dspanspan">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Bypass Microsoft Windows User Login  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Step I&lt;!-- raw HTML omitted --> :&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Get any Linux Distribution live bootable disk
(generally all Linux Distros comes         with live boot option). 
 &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->If you don&amp;rsquo;t have bootable disk download it from
the respective website. Although Ubuntu is most popular Linux
distribution. You can download Ubuntu from
:&lt;a href="http://www.ubuntu.com/download/desktop">http://www.ubuntu.com/download/desktop&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->   &lt;strong>( select the latest version according to
your cpu artitecture viz. 32 bit or 64 bit). After download, you can
burn it DVD or a USB flash
drive).&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**&lt;br>
**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Step II:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->Now reboot your PC and enter into BIOS menu by
pressing particular function key depending on your your pc manufacturer
( for lenovo its F12 and for HP its
F10). &lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->In the boot menu select DVD (if you want to boot
from Linux DVD) or select USB name (if you want to boot from usb
drive.&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Step III :&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Select live boot option ( in some cases like
linux mint, it automatically executes live boot without giving any
option). Once the desktop loads, first of all open COMPUTER icon
available on desktop region. (see the desktop region of linux
mint)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="../images/2016-01-25-bypass-windows-user-login-linux.png">&lt;img src="../images/thumbnails/2016-01-25-bypass-windows-user-login-linux.png" alt="">&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->After opening my computer,  open the disk on
which your windows is loaded, then select windows folder ( see fig.
below)&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a href="https://www.blogger.com/blogger.g?blogID=8588799416270471956">&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;a href="../images/2016-01-25-bypass-windows-user-login-linux2.png">&lt;img src="../images/thumbnails/2016-01-25-bypass-windows-user-login-linux2.png" alt="">&lt;/a>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> Inside windows folder you will find &amp;lsquo;system32&amp;rsquo;
folder, just open it and rename sethc.exe to anything.exe and rename
cmd.exe to
sethx.exe&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Step III:&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Start your PC after removing bootable device and
wait for windows login screen to
appeat.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Step IV: &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->When windows login screen appear, press shift 5
times, then command prompt appears on the
screen. &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Type the following : ( assuming that the
username is Jack and password as 1234 )&lt;/p>
&lt;p>net user Jack
1234&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->hit enter and exit command
prompt.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Then just login without typing any
password. &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->THATS
DONE&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;strong>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->try it &amp;hellip;..have good luck&amp;hellip;&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/strong>&lt;!-- raw HTML omitted -->**&lt;br>
**&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;br>
&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->** **&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="span-stylebackground-color-f3f3f3span">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/h2></content></item><item><title>About Me</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>Download Resume
Hi there My name is Krishankant and I&amp;rsquo;m a software engineer based in India 🇮🇳.
I have 2+ years of experience in software engineering.
I currently work as a Software Engineer in a Netherland based cyber security startup called - Breachlock IncBreachlock Inc. And previously I worked at Cvent for 12 months.
Skills :
Languages : Javascript, C++, Java, MySQL
Frameworks/Tools : ReactJS, ExpressJS, NodeJS
Others : Algorithms, Data Structures, OOP, System Design</description><content>&lt;p>&lt;a href="./pdf/KrishankantRay.pdf">&lt;img src="https://img.icons8.com/color/30/000000/pdf.png" alt="Download Resume"> Download Resume&lt;/a>&lt;/p>
&lt;h1 id="hi-there">Hi there&lt;/h1>
&lt;p>My name is Krishankant and I&amp;rsquo;m a software engineer based in India 🇮🇳.&lt;/p>
&lt;p>I have 2+ years of experience in software engineering.&lt;/p>
&lt;p>I currently work as a &lt;strong>Software Engineer&lt;/strong> in a Netherland based cyber security startup called - &lt;!-- raw HTML omitted -->Breachlock Inc&lt;!-- raw HTML omitted --> &lt;a href="http://breachlock.com/">Breachlock Inc&lt;/a>. And previously I worked at &lt;a href="https://www.cvent.com/">Cvent&lt;/a> for 12 months.&lt;/p>
&lt;p>&lt;strong>Skills&lt;/strong> :&lt;/p>
&lt;p>Languages : &lt;code>Javascript&lt;/code>, &lt;code>C++&lt;/code>, &lt;code>Java&lt;/code>, &lt;code>MySQL&lt;/code>&lt;/p>
&lt;p>Frameworks/Tools : &lt;code>ReactJS&lt;/code>, &lt;code>ExpressJS&lt;/code>, &lt;code>NodeJS&lt;/code>&lt;/p>
&lt;p>Others : &lt;code>Algorithms&lt;/code>, &lt;code>Data Structures&lt;/code>, &lt;code>OOP&lt;/code>, &lt;code>System Design&lt;/code>&lt;/p>
&lt;hr>
&lt;p>Feel free to reach out to me at &lt;a href="https://krishankantray.github.io/contact">contacts&lt;/a> page.&lt;/p></content></item><item><title>Contact</title><link>/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/contact/</guid><description> Contact Email: krishankant_rai@rediffmail.com LinkedIn: linkedin.com/in/krishankantray Phone: +91 9560621994 GitHub: github.com/krishankantray</description><content>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Contact&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Email&lt;/code>: &lt;a href="mailto:krishankant_rai@rediffmail.com">krishankant_rai@rediffmail.com&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LinkedIn&lt;/code>: &lt;a href="https://www.linkedin.com/in/krishankantray/">linkedin.com/in/krishankantray&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Phone&lt;/code>: +91 9560621994&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GitHub&lt;/code>: &lt;a href="https://github.com/krishankantray/">github.com/krishankantray&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content></item><item><title>Projects</title><link>/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/</guid><description>1. Blog CMS This‌‌ is‌‌ a‌‌ full‌‌ stack‌‌ blogging‌‌ app‌‌ which‌‌ provides ability‌‌ to‌‌ read‌‌ and‌‌ write‌‌ blogs. There‌‌ can‌‌ be‌‌ guest‌‌ users‌‌ and‌‌ logged‌‌ in‌‌ users.‌‌ The‌‌ guest ‌‌users‌‌ can‌‌ only‌‌ read‌‌ blog‌‌ as‌‌ compared‌‌ to‌‌ logged in‌‌ user‌‌ who‌‌ can‌‌ create‌‌ posts.‌ Technologies‌‌‌ -‌‌ NodeJs ,‌‌ Express,‌‌ MongoDB,‌‌ ReactJs‌
Github‌‌‌:‌ github.com/krishankantray/blog-cms‌ ‌
Project‌:‌ https://blog-cms-1561.herokuapp.com‌
2. Portfolio Site Its‌‌ a‌‌ portfolio‌‌ site‌‌ built‌‌ mainly‌‌ around‌‌ ReactJS‌‌ and redux.</description><content>&lt;h4 id="1-blog-cms">1. Blog CMS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">This‌‌ is‌‌ a‌‌ full‌‌ stack‌‌ blogging‌‌ app‌‌ which‌‌ provides ability‌‌ to‌‌ read‌‌ and‌‌ write‌‌ blogs.
There‌‌ can‌‌ be‌‌ guest‌‌ users‌‌ and‌‌ logged‌‌ in‌‌ users.‌‌ The‌‌ guest ‌‌users‌‌ can‌‌ only‌‌
read‌‌ blog‌‌ as‌‌ compared‌‌ to‌‌ logged in‌‌ user‌‌ who‌‌ can‌‌ create‌‌ posts.‌
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Technologies‌‌‌&lt;/code> -‌‌ NodeJs ,‌‌ Express,‌‌ MongoDB,‌‌ ReactJs‌&lt;/p>
&lt;p>&lt;code>Github‌‌‌&lt;/code>:‌ &lt;a href="github.com/krishankantray/blog-cms%E2%80%8C">github.com/krishankantray/blog-cms‌&lt;/a> ‌&lt;/p>
&lt;p>&lt;code>Project‌&lt;/code>:‌ &lt;a href="https://blog-cms-1561.herokuapp.com%E2%80%8C">https://blog-cms-1561.herokuapp.com‌&lt;/a>&lt;/p>
&lt;p>&lt;img src="./img/blog-cms.png" alt="Blog CMS">&lt;/p>
&lt;hr>
&lt;hr>
&lt;h4 id="2-portfolio-site">2. Portfolio Site&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Its‌‌ a‌‌ portfolio‌‌ site‌‌ built‌‌ mainly‌‌ around‌‌ ReactJS‌‌ and redux.
‌‌It‌‌ has‌‌ only‌‌ frontend‌‌ as‌‌ most‌‌ of‌‌ its‌‌ contents‌‌ are controlled‌‌
through‌‌ static‌‌ json‌‌ ﬁles.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Technologies‌‌‌&lt;/code> -‌‌ NodeJs ,‌‌ Express,‌‌ MongoDB,‌‌ ReactJs‌&lt;/p>
&lt;p>&lt;code>Github‌‌‌&lt;/code>:‌ &lt;a href="https://github.com/krishankantray/krishankantray-4">github.com/krishankantray/krishankantray-4‌&lt;/a> ‌&lt;/p>
&lt;p>&lt;code>Project‌&lt;/code>:‌ &lt;a href="https://krishankantray.netlify.app/">krishankantray.netlify.app/‌&lt;/a>&lt;/p>
&lt;p>&lt;img src="./img/portfolio.png" alt="Portfolio Site">&lt;/p></content></item></channel></rss>